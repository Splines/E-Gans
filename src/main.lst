main                                                                                                                    PAGE 1
                         1     CSEG AT 0h
                         2
  0020                   3     COMPARE EQU Buffer1X
                         4
                         5     ; Snake Calculation
  0020                   6     Buffer1X EQU 20h; Col
  0021                   7     Buffer1Y EQU 21h; Row
  0022                   8     Buffer2X EQU 22h; Col
  0023                   9     Buffer2Y EQU 23h; Row
                        10
                        11     ; Lenght 3
0000 752A08             12     mov 2Ah ,#08h; 3
0003 752B20             13     mov 2Bh, #20h; F
0006 752C08             14     mov 2Ch, #08h; 3
0009 752D40             15     mov 2Dh, #40h; G
                        16
                        17     ; Starting point
  0028                  18     HeadX EQU 28h; Keep in sync with incrementor initial value (!!!)
  0029                  19     HeadY EQU 29h
000C D243               20     setb HeadX.3; 3
000E D24C               21     setb HeadY.4; E
0010 852820             22     mov Buffer1X, HeadX
0013 852921             23     mov Buffer1Y, HeadY
                        24
                        25     ; Snake on grid with LEDs
  0024                  26     SnakeLedRepresentationX EQU 24h
  0025                  27     SnakeLedRepresentationY EQU 25h
                        28
                        29
  0027                  30     MOVE_STATE EQU 27h
  0038                  31     MOVE_STATE_left EQU MOVE_STATE.0
  0039                  32     MOVE_STATE_right EQU MOVE_STATE.1
  003A                  33     MOVE_STATE_up EQU MOVE_STATE.2
  003B                  34     MOVE_STATE_down EQU MOVE_STATE.3
0016 D23A               35     setb MOVE_STATE_UP
                        36
                        37
                        38     ; Init
0018 120021             39     lcall setTimer
001B 12002D             40     lcall startTimer
001E 0200C7             41     ljmp main
                        42
                        43     ; Timer
                        44     setTimer:
0021 758901             45     mov TMOD, #01h ; Timer0, 16bit
0024 C28D               46     clr TF0
0026 758A00             47     mov TL0, #000h; Timer low
0029 758CFF             48     mov TH0, #0FFh; Timer high
                        49     ; setb ET0
                        50     ; setb EA
002C 22                 51     ret
                        52
                        53     startTimer:
002D D28C               54     setb TR0
002F 22                 55     ret
                        56
                        57     ; Light up Matrix
                        58     ;updateMatrixLed:
                        59     ;mov P0, SnakeLedRepresentationY
                        60     ;mov P1, SnakeLedRepresentationX
                        61     ;ret
                        62
                        63
                        64
                        65     updateSnake:
                        66     ;;;;;;;;;;;;;;;; Check for game over ;;;;;;;;;;;;;;;;;;;;;;;;;
0030 792A               67     mov R1, #2Ah
                        68
                        69     gameOverCheckLoop:
                        70     isXEqual:
0032 E7                 71     mov A, @R1
0033 600E               72     jz SnakeLengthener ; check if we are at the end of the snake limbs
0035 09                 73     inc R1
0036 09                 74     inc R1
0037 B520F8             75     cjne A, Buffer1X, gameOverCheckLoop
                        76     isYEqual:
003A 19                 77     dec R1
003B E7                 78     mov A, @R1
003C 09                 79     inc R1
003D B521F2             80     cjne A, Buffer1Y, gameOverCheckLoop
                        81
0040 120118             82     lcall gameOver
                        83
                        84
                        85     SnakeLengthener:
                        86     ; Storage: starting from 28h
0043 7928               87     mov R1, #28h
                        88     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        89     ;;;;;;;;;;;;;;;;;;;;;; Snake Follow Loop ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        90     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        91     SnakeFollowLoop:
                        92     ; R1 is our incrementor
                        93     ; Given Buffer1 filled
                        94     ; Save old Head to Buffer2
                        95
0045 8722               96     mov Buffer2X, @R1
0047 09                 97     inc R1
0048 8723               98     mov Buffer2Y, @R1
                        99
                       100     ;;;;;;;;;;;;;;;;;;;;; Buffer1 X/Y ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       101     ; Move Buffer1 to Head (Update first element with Buffer1)
                       102     ; mov A, Buffer1X ; OR: Buffer1X, SnakeLedRepresentationX -> Save in SnakeLedRepresentationX
                       103     ; orl SnakeLedRepresentationX, A
004A 19                104     dec R1
004B A720              105     mov @R1, Buffer1X
                       106
                       107     ; mov A, Buffer1Y ; OR: Buffer1Y, SnakeLedRepresentationY -> save in SnakeLedRepresentationY
                       108     ; orl SnakeLedRepresentationY, A
004D 09                109     inc R1
004E A721              110     mov @R1, Buffer1Y
0050 09                111     inc R1
                       112
                       113     ; Update snake with pos from buffer 1
0051 852180            114     mov P0, Buffer1Y
0054 852090            115     mov P1, Buffer1X
                       116
                       117
                       118     ;;;;;;;;;;;;;;;;;;;;;;;;;; Break? ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       119     ; Check if next element is 0
0057 E7                120     mov A, @R1
0058 6029              121     jz endUpdateSnakeFromBreak
                       122
                       123     ;;;;;;;;;;;;;;;;;;;;; Buffer2 X/Y ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       124     ; Store second element in Buffer1
005A 8720              125     mov Buffer1X, @R1
005C 09                126     inc R1
005D 8721              127     mov Buffer1Y, @R1
                       128
                       129     ; Move buffer2 to second element
005F 19                130     dec R1
0060 A722              131     mov @R1, Buffer2X
                       132     ; mov A, Buffer2X ; OR: Buffer2X, SnakeLedRepresentationX -> save in SnakeLedRepresentationX
                       133     ; orl SnakeLedRepresentationX, A
0062 09                134     inc R1
0063 A723              135     mov @R1, Buffer2Y
0065 09                136     inc R1
                       137     ; mov A, Buffer2Y ; OR: Buffer2Y, SnakeLedRepresentationY -> save in SnakeLedRepresentationY
                       138     ; orl SnakeLedRepresentationY, A
                       139
                       140     ; Update snake with pos from buffer 2
0066 852380            141     mov P0, Buffer2Y
0069 852290            142     mov P1, Buffer2X
                       143
                       144     ;;;;;;;;;;;;;;;;;;;;;; End loop ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       145     ; Start with loop again
006C E7                146     mov A, @R1
006D 70D6              147     jnz SnakeFollowLoop
                       148
                       149     endUpdateSnakeFromEndOfLoop:
                       150     ; Check if timer is triggered
006F 308D22            151     jnb TF0, returnFromSnake
0072 120021            152     lcall setTimer ; Reset timer
                       153
                       154     ; Lengthen snake using buffer 1
0075 A720              155     mov @R1, buffer1X
0077 09                156     inc R1
0078 A721              157     mov @R1, buffer1Y
                       158
007A 852180            159     mov P0, Buffer1Y
007D 852090            160     mov P1, Buffer1X
                       161
0080 120094            162     lcall returnFromSnake
                       163
                       164     endUpdateSnakeFromBreak:
                       165     ; Check if timer is triggered
0083 308D0E            166     jnb TF0, returnFromSnake
0086 120021            167     lcall setTimer ; Reset timer
                       168
                       169     ; Lengthen snake using buffer 2
0089 A722              170     mov @R1, buffer2X
008B 09                171     inc R1
008C A723              172     mov @R1, buffer2Y
                       173
008E 852380            174     mov P0, Buffer2Y
0091 852290            175     mov P1, Buffer2X
                       176
                       177     returnFromSnake:
                       178     ; Move HEAD to Buffer1, so that move operations still work
0094 852820            179     mov Buffer1X, HeadX
0097 852921            180     mov Buffer1Y, HeadY
009A 22                181     ret
                       182
                       183
                       184     ;;;; Move Lookup table
                       185     ; Register 20h
                       186     ; Left  - #00000001b - bit 0
                       187     ; Right - #00000010b - bit 1
                       188     ; Up    - #00000100b - bit 2
                       189     ; Down  - #00001000b - bit 3
                       190
                       191     setLeft:
009B 752701            192     mov MOVE_STATE, #00000001b ; MOVE_STATE_LEFT
009E 22                193     ret
                       194
                       195     moveLeft:
009F C3                196     clr C
00A0 E520              197     mov A, Buffer1X
00A2 03                198     RR A
00A3 F520              199     mov Buffer1X, A
00A5 22                200     ret
                       201
                       202     setRight:
00A6 752702            203     mov MOVE_STATE, #00000010b ; MOVE_STATE_RIGHT
00A9 22                204     ret
                       205
                       206     moveRight:
00AA C3                207     clr C
00AB E520              208     mov A, Buffer1X
00AD 23                209     RL A
00AE F520              210     mov Buffer1X, A
00B0 22                211     ret
                       212
                       213     setUp:
00B1 752704            214     mov MOVE_STATE, #00000100b ; MOVE_STATE_UP
00B4 22                215     ret
                       216
                       217     moveUp:
00B5 C3                218     clr C
00B6 E521              219     mov A, Buffer1Y
00B8 03                220     RR A
00B9 F521              221     mov Buffer1Y, A
00BB 22                222     ret
                       223
                       224     setDown:
00BC 752708            225     mov MOVE_STATE, #00001000b ; MOVE_STATE_DOWN
00BF 22                226     ret
                       227
                       228     moveDown:
00C0 C3                229     clr C
00C1 E521              230     mov A, Buffer1Y
00C3 23                231     RL A
00C4 F521              232     mov Buffer1Y, A
00C6 22                233     ret
                       234
                       235
                       236     ; ------------------------- MAIN ---------------------------------
                       237     main:
                       238     matrixCheckRight:
00C7 75A00F            239     mov P2, #00001111b
00CA 20A113            240     jb P2.1, matrixCheckUp ; P2.1 is 0 if button "4" or "6" is pressed
00CD 75A0F0            241     mov P2, #11110000b
00D0 20A605            242     jb P2.6, matrixCheckLeft ; P2.6 is 0 if button "6" is pressed
00D3 11A6              243     call setRight
00D5 0200F6            244     ljmp callMove
                       245
                       246     matrixCheckLeft:
00D8 20A416            247     jb P2.4, matrixCheckDown ; P2.4 is 0 if button "4" is pressed
00DB 119B              248     call setLeft
00DD 0200F6            249     ljmp callMove
                       250
                       251     matrixCheckUp:
00E0 75A0F0            252     mov P2, #11110000b
00E3 20A510            253     jb P2.5, callMove ; P2.5 is 0 if button "2" or "8" is pressed
00E6 75A00F            254     mov P2, #00001111b
00E9 20A005            255     jb P2.0, matrixCheckDown ; P2.0 is 0 if button "2" is pressed
00EC 11B1              256     call setUp
00EE 0200F6            257     ljmp callMove
                       258
                       259     matrixCheckDown:
00F1 20A202            260     jb P2.2, callMove ; P2.2 is 0 if button "8" is pressed
00F4 11BC              261     call setDown
                       262     ; no ljmp callMove needed
                       263
                       264
                       265
                       266     callMove:
                       267     checkLeft:
00F6 303805            268     jnb MOVE_STATE_LEFT, checkRight
00F9 119F              269     call moveLeft
00FB 020113            270     ljmp updateSnakeCaller
                       271
                       272     checkRight:
00FE 303905            273     jnb MOVE_STATE_RIGHT, checkUp
0101 11AA              274     call moveRight
0103 020113            275     ljmp updateSnakeCaller
                       276
                       277     checkUp:
0106 303A05            278     jnb MOVE_STATE_UP, checkDown
0109 11B5              279     call moveUp
010B 020113            280     ljmp updateSnakeCaller
                       281
                       282     checkDown:
010E 303B02            283     jnb MOVE_STATE_DOWN, updateSnakeCaller
0111 11C0              284     call moveDown
                       285
                       286     ; Used since there is no ljnb, therefore we have to go in here first
                       287     updateSnakeCaller:
0113 1130              288     call updateSnake
                       289
0115 0200C7            290     ljmp main
                       291
                       292
                       293     gameOver:
0118 7580FF            294     mov P0, #0FFh
011B 7590FF            295     mov P1, #0FFh
011E 758000            296     mov P0, #00h
0121 759000            297     mov P1, #00h
0124 00                298     nop
0125 80F1              299     jmp gameOver
****WARNING:Missing`END'directive
ASSEMBLY COMPLETE, NO ERRORS FOUND, 1 WARNING


ERROR SUMMARY:
Line 299, WARNING:Missing`END'directive

SYMBOL TABLE:
??MCU_8051_IDE . . . . . . . . . . .  N  NUMB  8051H  NOT USED
??VERSION. . . . . . . . . . . . . .  N  NUMB  0149H  NOT USED
AC . . . . . . . . . . . . . . . . .  B  ADDR  00D6H  NOT USED
ACC. . . . . . . . . . . . . . . . .  D  ADDR  00E0H  NOT USED
ACSR . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
ADCF . . . . . . . . . . . . . . . .  D  ADDR  00F6H  NOT USED
ADCLK. . . . . . . . . . . . . . . .  D  ADDR  00F2H  NOT USED
ADCON. . . . . . . . . . . . . . . .  D  ADDR  00F3H  NOT USED
ADDH . . . . . . . . . . . . . . . .  D  ADDR  00F5H  NOT USED
ADDL . . . . . . . . . . . . . . . .  D  ADDR  00F4H  NOT USED
AUXR . . . . . . . . . . . . . . . .  D  ADDR  008EH  NOT USED
AUXR1. . . . . . . . . . . . . . . .  D  ADDR  00A2H  NOT USED
B. . . . . . . . . . . . . . . . . .  D  ADDR  00F0H  NOT USED
BDRCON . . . . . . . . . . . . . . .  D  ADDR  009BH  NOT USED
BDRCON_1 . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
BRL. . . . . . . . . . . . . . . . .  D  ADDR  009AH  NOT USED
BUFFER1X . . . . . . . . . . . . . .  N  NUMB  0020H
BUFFER1Y . . . . . . . . . . . . . .  N  NUMB  0021H
BUFFER2X . . . . . . . . . . . . . .  N  NUMB  0022H
BUFFER2Y . . . . . . . . . . . . . .  N  NUMB  0023H
CALLMOVE . . . . . . . . . . . . . .  C  ADDR  00F6H
CCAP0H . . . . . . . . . . . . . . .  D  ADDR  00FAH  NOT USED
CCAP0L . . . . . . . . . . . . . . .  D  ADDR  00EAH  NOT USED
CCAP1H . . . . . . . . . . . . . . .  D  ADDR  00FBH  NOT USED
CCAP1L . . . . . . . . . . . . . . .  D  ADDR  00EBH  NOT USED
CCAP2H . . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAP3H . . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAP4H . . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL2H. . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAPL2L. . . . . . . . . . . . . . .  D  ADDR  00ECH  NOT USED
CCAPL3H. . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAPL3L. . . . . . . . . . . . . . .  D  ADDR  00EDH  NOT USED
CCAPL4H. . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL4L. . . . . . . . . . . . . . .  D  ADDR  00EEH  NOT USED
CCAPM0 . . . . . . . . . . . . . . .  D  ADDR  00DAH  NOT USED
CCAPM1 . . . . . . . . . . . . . . .  D  ADDR  00DBH  NOT USED
CCAPM2 . . . . . . . . . . . . . . .  D  ADDR  00DCH  NOT USED
CCAPM3 . . . . . . . . . . . . . . .  D  ADDR  00DDH  NOT USED
CCAPM4 . . . . . . . . . . . . . . .  D  ADDR  00DEH  NOT USED
CCF0 . . . . . . . . . . . . . . . .  B  ADDR  00D8H  NOT USED
CCF1 . . . . . . . . . . . . . . . .  B  ADDR  00D9H  NOT USED
CCF2 . . . . . . . . . . . . . . . .  B  ADDR  00DAH  NOT USED
CCF3 . . . . . . . . . . . . . . . .  B  ADDR  00DBH  NOT USED
CCF4 . . . . . . . . . . . . . . . .  B  ADDR  00DCH  NOT USED
CCON . . . . . . . . . . . . . . . .  D  ADDR  00D8H  NOT USED
CFINT. . . . . . . . . . . . . . . .  C  ADDR  0033H  NOT USED
CH . . . . . . . . . . . . . . . . .  D  ADDR  00F9H  NOT USED
CHECKDOWN. . . . . . . . . . . . . .  C  ADDR  010EH
CHECKLEFT. . . . . . . . . . . . . .  C  ADDR  00F6H  NOT USED
CHECKRIGHT . . . . . . . . . . . . .  C  ADDR  00FEH
CHECKUP. . . . . . . . . . . . . . .  C  ADDR  0106H
CKCON. . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON0 . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKRL . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
CKSEL. . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
CL . . . . . . . . . . . . . . . . .  D  ADDR  00E9H  NOT USED
CLKREG . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CMOD . . . . . . . . . . . . . . . .  D  ADDR  00D9H  NOT USED
COMPARE. . . . . . . . . . . . . . .  N  NUMB  0020H  NOT USED
CPRL2. . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CR . . . . . . . . . . . . . . . . .  B  ADDR  00DEH  NOT USED
CT2. . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
CY . . . . . . . . . . . . . . . . .  B  ADDR  00D7H  NOT USED
DP0H . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DP0L . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DP1H . . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
DP1L . . . . . . . . . . . . . . . .  D  ADDR  0084H  NOT USED
DPH. . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DPL. . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
EA . . . . . . . . . . . . . . . . .  B  ADDR  00AFH  NOT USED
EC . . . . . . . . . . . . . . . . .  B  ADDR  00AEH  NOT USED
EECON. . . . . . . . . . . . . . . .  D  ADDR  0096H  NOT USED
ENDUPDATESNAKEFROMBREAK. . . . . . .  C  ADDR  0083H
ENDUPDATESNAKEFROMENDOFLOOP. . . . .  C  ADDR  006FH  NOT USED
ES . . . . . . . . . . . . . . . . .  B  ADDR  00ACH  NOT USED
ET0. . . . . . . . . . . . . . . . .  B  ADDR  00A9H  NOT USED
ET1. . . . . . . . . . . . . . . . .  B  ADDR  00ABH  NOT USED
ET2. . . . . . . . . . . . . . . . .  B  ADDR  00ADH  NOT USED
EX0. . . . . . . . . . . . . . . . .  B  ADDR  00A8H  NOT USED
EX1. . . . . . . . . . . . . . . . .  B  ADDR  00AAH  NOT USED
EXEN2. . . . . . . . . . . . . . . .  B  ADDR  00CBH  NOT USED
EXF2 . . . . . . . . . . . . . . . .  B  ADDR  00CEH  NOT USED
EXTI0. . . . . . . . . . . . . . . .  C  ADDR  0003H  NOT USED
EXTI1. . . . . . . . . . . . . . . .  C  ADDR  0013H  NOT USED
F0 . . . . . . . . . . . . . . . . .  B  ADDR  00D5H  NOT USED
FE . . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
GAMEOVER . . . . . . . . . . . . . .  C  ADDR  0118H
GAMEOVERCHECKLOOP. . . . . . . . . .  C  ADDR  0032H
HEADX. . . . . . . . . . . . . . . .  N  NUMB  0028H
HEADY. . . . . . . . . . . . . . . .  N  NUMB  0029H
IE . . . . . . . . . . . . . . . . .  D  ADDR  00A8H  NOT USED
IE0. . . . . . . . . . . . . . . . .  B  ADDR  0089H  NOT USED
IE1. . . . . . . . . . . . . . . . .  B  ADDR  008BH  NOT USED
INT0 . . . . . . . . . . . . . . . .  B  ADDR  00B2H  NOT USED
INT1 . . . . . . . . . . . . . . . .  B  ADDR  00B3H  NOT USED
IP . . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPH. . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH0 . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH1 . . . . . . . . . . . . . . . .  D  ADDR  00B3H  NOT USED
IPL0 . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPL1 . . . . . . . . . . . . . . . .  D  ADDR  00B2H  NOT USED
ISXEQUAL . . . . . . . . . . . . . .  C  ADDR  0032H  NOT USED
ISYEQUAL . . . . . . . . . . . . . .  C  ADDR  003AH  NOT USED
IT0. . . . . . . . . . . . . . . . .  B  ADDR  0088H  NOT USED
IT1. . . . . . . . . . . . . . . . .  B  ADDR  008AH  NOT USED
KBE. . . . . . . . . . . . . . . . .  D  ADDR  009DH  NOT USED
KBF. . . . . . . . . . . . . . . . .  D  ADDR  009EH  NOT USED
KBLS . . . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
MAIN . . . . . . . . . . . . . . . .  C  ADDR  00C7H
MATRIXCHECKDOWN. . . . . . . . . . .  C  ADDR  00F1H
MATRIXCHECKLEFT. . . . . . . . . . .  C  ADDR  00D8H
MATRIXCHECKRIGHT . . . . . . . . . .  C  ADDR  00C7H  NOT USED
MATRIXCHECKUP. . . . . . . . . . . .  C  ADDR  00E0H
MOVEDOWN . . . . . . . . . . . . . .  C  ADDR  00C0H
MOVELEFT . . . . . . . . . . . . . .  C  ADDR  009FH
MOVERIGHT. . . . . . . . . . . . . .  C  ADDR  00AAH
MOVEUP . . . . . . . . . . . . . . .  C  ADDR  00B5H
MOVE_STATE . . . . . . . . . . . . .  N  NUMB  0027H
MOVE_STATE_DOWN. . . . . . . . . . .  N  NUMB  003BH
MOVE_STATE_LEFT. . . . . . . . . . .  N  NUMB  0038H
MOVE_STATE_RIGHT . . . . . . . . . .  N  NUMB  0039H
MOVE_STATE_UP. . . . . . . . . . . .  N  NUMB  003AH
OSCCON . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
OV . . . . . . . . . . . . . . . . .  B  ADDR  00D2H  NOT USED
P. . . . . . . . . . . . . . . . . .  B  ADDR  00D0H  NOT USED
P0 . . . . . . . . . . . . . . . . .  D  ADDR  0080H
P1 . . . . . . . . . . . . . . . . .  D  ADDR  0090H
P1M1 . . . . . . . . . . . . . . . .  D  ADDR  00D4H  NOT USED
P1M2 . . . . . . . . . . . . . . . .  D  ADDR  00E2H  NOT USED
P2 . . . . . . . . . . . . . . . . .  D  ADDR  00A0H
P3 . . . . . . . . . . . . . . . . .  D  ADDR  00B0H  NOT USED
P3M1 . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
P3M2 . . . . . . . . . . . . . . . .  D  ADDR  00E3H  NOT USED
P4 . . . . . . . . . . . . . . . . .  D  ADDR  00C0H  NOT USED
P4M1 . . . . . . . . . . . . . . . .  D  ADDR  00D6H  NOT USED
P4M2 . . . . . . . . . . . . . . . .  D  ADDR  00E4H  NOT USED
P5 . . . . . . . . . . . . . . . . .  D  ADDR  00E8H  NOT USED
PC . . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PCON . . . . . . . . . . . . . . . .  D  ADDR  0087H  NOT USED
PPCL . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PS . . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSL. . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSW. . . . . . . . . . . . . . . . .  D  ADDR  00D0H  NOT USED
PT0. . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0L . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT1. . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1L . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT2. . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2L . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PX0. . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0L . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX1. . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1L . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
RB8. . . . . . . . . . . . . . . . .  B  ADDR  009AH  NOT USED
RCAP2H . . . . . . . . . . . . . . .  D  ADDR  00CBH  NOT USED
RCAP2L . . . . . . . . . . . . . . .  D  ADDR  00CAH  NOT USED
RCLK . . . . . . . . . . . . . . . .  B  ADDR  00CDH  NOT USED
RD . . . . . . . . . . . . . . . . .  B  ADDR  00B7H  NOT USED
REN. . . . . . . . . . . . . . . . .  B  ADDR  009CH  NOT USED
RESET. . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RETURNFROMSNAKE. . . . . . . . . . .  C  ADDR  0094H
RI . . . . . . . . . . . . . . . . .  B  ADDR  0098H  NOT USED
RS0. . . . . . . . . . . . . . . . .  B  ADDR  00D3H  NOT USED
RS1. . . . . . . . . . . . . . . . .  B  ADDR  00D4H  NOT USED
RXD. . . . . . . . . . . . . . . . .  B  ADDR  00B0H  NOT USED
SADDR. . . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_0. . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_1. . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SADEN. . . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_0. . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_1. . . . . . . . . . . . . . .  D  ADDR  00BAH  NOT USED
SBUF . . . . . . . . . . . . . . . .  D  ADDR  0099H  NOT USED
SCON . . . . . . . . . . . . . . . .  D  ADDR  0098H  NOT USED
SETDOWN. . . . . . . . . . . . . . .  C  ADDR  00BCH
SETLEFT. . . . . . . . . . . . . . .  C  ADDR  009BH
SETRIGHT . . . . . . . . . . . . . .  C  ADDR  00A6H
SETTIMER . . . . . . . . . . . . . .  C  ADDR  0021H
SETUP. . . . . . . . . . . . . . . .  C  ADDR  00B1H
SINT . . . . . . . . . . . . . . . .  C  ADDR  0023H  NOT USED
SM0. . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
SM1. . . . . . . . . . . . . . . . .  B  ADDR  009EH  NOT USED
SM2. . . . . . . . . . . . . . . . .  B  ADDR  009DH  NOT USED
SNAKEFOLLOWLOOP. . . . . . . . . . .  C  ADDR  0045H
SNAKELEDREPRESENTATIONX. . . . . . .  N  NUMB  0024H  NOT USED
SNAKELEDREPRESENTATIONY. . . . . . .  N  NUMB  0025H  NOT USED
SNAKELENGTHENER. . . . . . . . . . .  C  ADDR  0043H
SP . . . . . . . . . . . . . . . . .  D  ADDR  0081H  NOT USED
SPCON. . . . . . . . . . . . . . . .  D  ADDR  00C3H  NOT USED
SPCR . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
SPDAT. . . . . . . . . . . . . . . .  D  ADDR  00C5H  NOT USED
SPDR . . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
SPSR . . . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SPSTA. . . . . . . . . . . . . . . .  D  ADDR  00C4H  NOT USED
STARTTIMER . . . . . . . . . . . . .  C  ADDR  002DH
T0 . . . . . . . . . . . . . . . . .  B  ADDR  00B4H  NOT USED
T1 . . . . . . . . . . . . . . . . .  B  ADDR  00B5H  NOT USED
T2CON. . . . . . . . . . . . . . . .  D  ADDR  00C8H  NOT USED
T2MOD. . . . . . . . . . . . . . . .  D  ADDR  00C9H  NOT USED
TB8. . . . . . . . . . . . . . . . .  B  ADDR  009BH  NOT USED
TCLK . . . . . . . . . . . . . . . .  B  ADDR  00CCH  NOT USED
TCON . . . . . . . . . . . . . . . .  D  ADDR  0088H  NOT USED
TF0. . . . . . . . . . . . . . . . .  B  ADDR  008DH
TF1. . . . . . . . . . . . . . . . .  B  ADDR  008FH  NOT USED
TF2. . . . . . . . . . . . . . . . .  B  ADDR  00CFH  NOT USED
TH0. . . . . . . . . . . . . . . . .  D  ADDR  008CH
TH1. . . . . . . . . . . . . . . . .  D  ADDR  008DH  NOT USED
TH2. . . . . . . . . . . . . . . . .  D  ADDR  00CDH  NOT USED
TI . . . . . . . . . . . . . . . . .  B  ADDR  0099H  NOT USED
TIMER0 . . . . . . . . . . . . . . .  C  ADDR  000BH  NOT USED
TIMER1 . . . . . . . . . . . . . . .  C  ADDR  001BH  NOT USED
TIMER2 . . . . . . . . . . . . . . .  C  ADDR  002BH  NOT USED
TL0. . . . . . . . . . . . . . . . .  D  ADDR  008AH
TL1. . . . . . . . . . . . . . . . .  D  ADDR  008BH  NOT USED
TL2. . . . . . . . . . . . . . . . .  D  ADDR  00CCH  NOT USED
TMOD . . . . . . . . . . . . . . . .  D  ADDR  0089H
TR0. . . . . . . . . . . . . . . . .  B  ADDR  008CH
TR1. . . . . . . . . . . . . . . . .  B  ADDR  008EH  NOT USED
TR2. . . . . . . . . . . . . . . . .  B  ADDR  00CAH  NOT USED
TXD. . . . . . . . . . . . . . . . .  B  ADDR  00B1H  NOT USED
UPDATESNAKE. . . . . . . . . . . . .  C  ADDR  0030H
UPDATESNAKECALLER. . . . . . . . . .  C  ADDR  0113H
WDTCON . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTPRG . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTRST . . . . . . . . . . . . . . .  D  ADDR  00A6H  NOT USED
WR . . . . . . . . . . . . . . . . .  B  ADDR  00B6H  NOT USED