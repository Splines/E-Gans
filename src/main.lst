main                                                                                                                    PAGE 1
                         1     CSEG AT 0h
                         2
                         3     ; Snake Calculation
  0020                   4     Buffer1X EQU 20h; Col
  0021                   5     Buffer1Y EQU 21h; Row
  0022                   6     Buffer2X EQU 22h; Col
  0023                   7     Buffer2Y EQU 23h; Row
                         8
                         9     ; Lenght 4
0000 752A08             10     mov 2Ah ,#08h
0003 752B08             11     mov 2Bh, #08h
0006 752C10             12     mov 2Ch, #10h
0009 752D08             13     mov 2Dh, #08h
000C 752E08             14     mov 2Eh, #08h
000F 752F02             15     mov 2Fh, #02h
                        16
                        17     ; Starting point
  0028                  18     HeadX EQU 28h; Keep in sync with incrementor initial value (!!!)
  0029                  19     HeadY EQU 29h
0012 D243               20     setb HeadX.3
0014 D24C               21     setb HeadY.4
0016 852820             22     mov Buffer1X, HeadX
0019 852921             23     mov Buffer1Y, HeadY
                        24
                        25     ; Snake on grid with LEDs
  0024                  26     SnakeLedRepresentationX EQU 24h
  0025                  27     SnakeLedRepresentationY EQU 25h
                        28
                        29
  0027                  30     MOVE_STATE EQU 27h
  0038                  31     MOVE_STATE_left EQU MOVE_STATE.0
  0039                  32     MOVE_STATE_right EQU MOVE_STATE.1
  003A                  33     MOVE_STATE_up EQU MOVE_STATE.2
  003B                  34     MOVE_STATE_down EQU MOVE_STATE.3
001C D23A               35     setb MOVE_STATE_UP
                        36
                        37
                        38     ; Init
001E 120027             39     lcall setTimer
0021 120033             40     lcall startTimer
0024 0200A3             41     ljmp main
                        42
                        43     ; Timer
                        44     setTimer:
0027 758901             45     mov TMOD, #01h ; Timer0, 16bit
002A C28D               46     clr TF0
002C 758AEB             47     mov TL0, #0EBh; Timer low
002F 758CFF             48     mov TH0, #0FFh; Timer high
                        49     ; setb ET0
                        50     ; setb EA
0032 22                 51     ret
                        52
                        53     startTimer:
0033 D28C               54     setb TR0
0035 22                 55     ret
                        56
                        57     ; Light up Matrix
                        58     ;updateMatrixLed:
                        59     ;mov P0, SnakeLedRepresentationY
                        60     ;mov P1, SnakeLedRepresentationX
                        61     ;ret
                        62
                        63
                        64
                        65     updateSnake:
0036 308D37             66     jnb TF0, endUpdateSnake
0039 120027             67     lcall setTimer
                        68     ; Storage
                        69     ; starting from 28h
                        70
                        71     ; Reset LED Representation
                        72     ;mov SnakeLedRepresentationX, #00h
                        73     ;mov SnakeLedRepresentationY, #00h
                        74
003C 7928               75     mov R1, #28h
                        76
                        77
                        78     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        79     ;;;;;;;;;;;;;;;;;;;;;; Snake Follow Loop ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        80     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        81     SnakeFollowLoop:
                        82     ; R1 is our incrementor
                        83     ; Given Buffer1 filled
                        84     ; Save old Head to Buffer2
                        85
003E 8722               86     mov Buffer2X, @R1
0040 09                 87     inc R1
0041 8723               88     mov Buffer2Y, @R1
                        89
                        90     ;;;;;;;;;;;;;;;;;;;;; Buffer1 X/Y ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        91     ; Move Buffer1 to Head (Update first element with Buffer1)
0043 E520               92     mov A, Buffer1X ; OR: Buffer1X, SnakeLedRepresentationX -> Save in SnakeLedRepresentationX
                        93     ; orl SnakeLedRepresentationX, A
0045 19                 94     dec R1
0046 A720               95     mov @R1, Buffer1X
                        96
0048 E521               97     mov A, Buffer1Y ; OR: Buffer1Y, SnakeLedRepresentationY -> save in SnakeLedRepresentationY
                        98     ; orl SnakeLedRepresentationY, A
004A 09                 99     inc R1
004B A721              100     mov @R1, Buffer1Y
004D 09                101     inc R1
                       102
                       103     ; Update snake with pos from buffer 1
004E 852180            104     mov P0, Buffer1Y
0051 852090            105     mov P1, Buffer1X
                       106
                       107
                       108     ;;;;;;;;;;;;;;;;;;;;;;;;;; Break? ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       109     ; Check if next element is 0
0054 E7                110     mov A, @R1
0055 6019              111     jz endUpdateSnake
                       112
                       113     ;;;;;;;;;;;;;;;;;;;;; Buffer2 X/Y ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       114     ; Store second element in Buffer1
0057 8720              115     mov Buffer1X, @R1
0059 09                116     inc R1
005A 8721              117     mov Buffer1Y, @R1
                       118
                       119     ; Move buffer2 to second element
005C 19                120     dec R1
005D A722              121     mov @R1, Buffer2X
005F E522              122     mov A, Buffer2X ; OR: Buffer2X, SnakeLedRepresentationX -> save in SnakeLedRepresentationX
                       123     ; orl SnakeLedRepresentationX, A
0061 09                124     inc R1
0062 A723              125     mov @R1, Buffer2Y
0064 09                126     inc R1
0065 E523              127     mov A, Buffer2Y ; OR: Buffer2Y, SnakeLedRepresentationY -> save in SnakeLedRepresentationY
                       128     ; orl SnakeLedRepresentationY, A
                       129
                       130     ; Update snake with pos from buffer 2
0067 852380            131     mov P0, Buffer2Y
006A 852290            132     mov P1, Buffer2X
                       133
                       134     ;;;;;;;;;;;;;;;;;;;;;; End loop ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       135     ; Do a jump
006D E7                136     mov A, @R1
006E 70CE              137     jnz SnakeFollowLoop
                       138
                       139     endUpdateSnake:
                       140     ; Move HEAD to Buffer1, so that move operations still work
0070 852820            141     mov Buffer1X, HeadX
0073 852921            142     mov Buffer1Y, HeadY
0076 22                143     ret
                       144
                       145
                       146
                       147     ;;;; Move Lookup table
                       148     ; Register 20h
                       149     ; Left  - #00000001b - bit 0
                       150     ; Right - #00000010b - bit 1
                       151     ; Up    - #00000100b - bit 2
                       152     ; Down  - #00001000b - bit 3
                       153
                       154     setLeft:
0077 752701            155     mov MOVE_STATE, #00000001b ; MOVE_STATE_LEFT
007A 22                156     ret
                       157
                       158     moveLeft:
007B C3                159     clr C
007C E520              160     mov A, Buffer1X
007E 03                161     RR A
007F F520              162     mov Buffer1X, A
0081 22                163     ret
                       164
                       165     setRight:
0082 752702            166     mov MOVE_STATE, #00000010b ; MOVE_STATE_RIGHT
0085 22                167     ret
                       168
                       169     moveRight:
0086 C3                170     clr C
0087 E520              171     mov A, Buffer1X
0089 23                172     RL A
008A F520              173     mov Buffer1X, A
008C 22                174     ret
                       175
                       176     setUp:
008D 752704            177     mov MOVE_STATE, #00000100b ; MOVE_STATE_UP
0090 22                178     ret
                       179
                       180     moveUp:
0091 C3                181     clr C
0092 E521              182     mov A, Buffer1Y
0094 03                183     RR A
0095 F521              184     mov Buffer1Y, A
0097 22                185     ret
                       186
                       187     setDown:
0098 752708            188     mov MOVE_STATE, #00001000b ; MOVE_STATE_DOWN
009B 22                189     ret
                       190
                       191     moveDown:
009C C3                192     clr C
009D E521              193     mov A, Buffer1Y
009F 23                194     RL A
00A0 F521              195     mov Buffer1Y, A
00A2 22                196     ret
                       197
                       198
                       199     ; ------------------------- MAIN ---------------------------------
                       200     main:
                       201     matrixCheckRight:
00A3 75A00F            202     mov P2, #00001111b
00A6 20A113            203     jb P2.1, matrixCheckUp ; P2.1 is 0 if button "4" or "6" is pressed
00A9 75A0F0            204     mov P2, #11110000b
00AC 20A605            205     jb P2.6, matrixCheckLeft ; P2.6 is 0 if button "6" is pressed
00AF 1182              206     call setRight
00B1 0200D2            207     ljmp callMove
                       208
                       209     matrixCheckLeft:
00B4 20A416            210     jb P2.4, matrixCheckDown ; P2.4 is 0 if button "4" is pressed
00B7 1177              211     call setLeft
00B9 0200D2            212     ljmp callMove
                       213
                       214     matrixCheckUp:
00BC 75A0F0            215     mov P2, #11110000b
00BF 20A510            216     jb P2.5, callMove ; P2.5 is 0 if button "2" or "8" is pressed
00C2 75A00F            217     mov P2, #00001111b
00C5 20A005            218     jb P2.0, matrixCheckDown ; P2.0 is 0 if button "2" is pressed
00C8 118D              219     call setUp
00CA 0200D2            220     ljmp callMove
                       221
                       222     matrixCheckDown:
00CD 20A202            223     jb P2.2, callMove ; P2.2 is 0 if button "8" is pressed
00D0 1198              224     call setDown
                       225     ; no ljmp callMove needed
                       226
                       227
                       228
                       229     callMove:
                       230     checkLeft:
00D2 303805            231     jnb MOVE_STATE_LEFT, checkRight
00D5 117B              232     call moveLeft
00D7 0200EF            233     ljmp todo
                       234
                       235     checkRight:
00DA 303905            236     jnb MOVE_STATE_RIGHT, checkUp
00DD 1186              237     call moveRight
00DF 0200EF            238     ljmp todo
                       239
                       240     checkUp:
00E2 303A05            241     jnb MOVE_STATE_UP, checkDown
00E5 1191              242     call moveUp
00E7 0200EF            243     ljmp todo
                       244
                       245     checkDown:
00EA 303B02            246     jnb MOVE_STATE_DOWN, todo
00ED 119C              247     call moveDown
                       248
                       249     todo:
00EF 1136              250     call updateSnake
                       251     ; call updateMatrixLed
                       252
00F1 0200A3            253     ljmp main
                       254
                       255
****WARNING:Missing`END'directive
ASSEMBLY COMPLETE, NO ERRORS FOUND, 1 WARNING


ERROR SUMMARY:
Line 255, WARNING:Missing`END'directive

SYMBOL TABLE:
??MCU_8051_IDE . . . . . . . . . . .  N  NUMB  8051H  NOT USED
??VERSION. . . . . . . . . . . . . .  N  NUMB  0149H  NOT USED
AC . . . . . . . . . . . . . . . . .  B  ADDR  00D6H  NOT USED
ACC. . . . . . . . . . . . . . . . .  D  ADDR  00E0H  NOT USED
ACSR . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
ADCF . . . . . . . . . . . . . . . .  D  ADDR  00F6H  NOT USED
ADCLK. . . . . . . . . . . . . . . .  D  ADDR  00F2H  NOT USED
ADCON. . . . . . . . . . . . . . . .  D  ADDR  00F3H  NOT USED
ADDH . . . . . . . . . . . . . . . .  D  ADDR  00F5H  NOT USED
ADDL . . . . . . . . . . . . . . . .  D  ADDR  00F4H  NOT USED
AUXR . . . . . . . . . . . . . . . .  D  ADDR  008EH  NOT USED
AUXR1. . . . . . . . . . . . . . . .  D  ADDR  00A2H  NOT USED
B. . . . . . . . . . . . . . . . . .  D  ADDR  00F0H  NOT USED
BDRCON . . . . . . . . . . . . . . .  D  ADDR  009BH  NOT USED
BDRCON_1 . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
BRL. . . . . . . . . . . . . . . . .  D  ADDR  009AH  NOT USED
BUFFER1X . . . . . . . . . . . . . .  N  NUMB  0020H
BUFFER1Y . . . . . . . . . . . . . .  N  NUMB  0021H
BUFFER2X . . . . . . . . . . . . . .  N  NUMB  0022H
BUFFER2Y . . . . . . . . . . . . . .  N  NUMB  0023H
CALLMOVE . . . . . . . . . . . . . .  C  ADDR  00D2H
CCAP0H . . . . . . . . . . . . . . .  D  ADDR  00FAH  NOT USED
CCAP0L . . . . . . . . . . . . . . .  D  ADDR  00EAH  NOT USED
CCAP1H . . . . . . . . . . . . . . .  D  ADDR  00FBH  NOT USED
CCAP1L . . . . . . . . . . . . . . .  D  ADDR  00EBH  NOT USED
CCAP2H . . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAP3H . . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAP4H . . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL2H. . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAPL2L. . . . . . . . . . . . . . .  D  ADDR  00ECH  NOT USED
CCAPL3H. . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAPL3L. . . . . . . . . . . . . . .  D  ADDR  00EDH  NOT USED
CCAPL4H. . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL4L. . . . . . . . . . . . . . .  D  ADDR  00EEH  NOT USED
CCAPM0 . . . . . . . . . . . . . . .  D  ADDR  00DAH  NOT USED
CCAPM1 . . . . . . . . . . . . . . .  D  ADDR  00DBH  NOT USED
CCAPM2 . . . . . . . . . . . . . . .  D  ADDR  00DCH  NOT USED
CCAPM3 . . . . . . . . . . . . . . .  D  ADDR  00DDH  NOT USED
CCAPM4 . . . . . . . . . . . . . . .  D  ADDR  00DEH  NOT USED
CCF0 . . . . . . . . . . . . . . . .  B  ADDR  00D8H  NOT USED
CCF1 . . . . . . . . . . . . . . . .  B  ADDR  00D9H  NOT USED
CCF2 . . . . . . . . . . . . . . . .  B  ADDR  00DAH  NOT USED
CCF3 . . . . . . . . . . . . . . . .  B  ADDR  00DBH  NOT USED
CCF4 . . . . . . . . . . . . . . . .  B  ADDR  00DCH  NOT USED
CCON . . . . . . . . . . . . . . . .  D  ADDR  00D8H  NOT USED
CFINT. . . . . . . . . . . . . . . .  C  ADDR  0033H  NOT USED
CH . . . . . . . . . . . . . . . . .  D  ADDR  00F9H  NOT USED
CHECKDOWN. . . . . . . . . . . . . .  C  ADDR  00EAH
CHECKLEFT. . . . . . . . . . . . . .  C  ADDR  00D2H  NOT USED
CHECKRIGHT . . . . . . . . . . . . .  C  ADDR  00DAH
CHECKUP. . . . . . . . . . . . . . .  C  ADDR  00E2H
CKCON. . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON0 . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKRL . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
CKSEL. . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
CL . . . . . . . . . . . . . . . . .  D  ADDR  00E9H  NOT USED
CLKREG . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CMOD . . . . . . . . . . . . . . . .  D  ADDR  00D9H  NOT USED
CPRL2. . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CR . . . . . . . . . . . . . . . . .  B  ADDR  00DEH  NOT USED
CT2. . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
CY . . . . . . . . . . . . . . . . .  B  ADDR  00D7H  NOT USED
DP0H . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DP0L . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DP1H . . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
DP1L . . . . . . . . . . . . . . . .  D  ADDR  0084H  NOT USED
DPH. . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DPL. . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
EA . . . . . . . . . . . . . . . . .  B  ADDR  00AFH  NOT USED
EC . . . . . . . . . . . . . . . . .  B  ADDR  00AEH  NOT USED
EECON. . . . . . . . . . . . . . . .  D  ADDR  0096H  NOT USED
ENDUPDATESNAKE . . . . . . . . . . .  C  ADDR  0070H
ES . . . . . . . . . . . . . . . . .  B  ADDR  00ACH  NOT USED
ET0. . . . . . . . . . . . . . . . .  B  ADDR  00A9H  NOT USED
ET1. . . . . . . . . . . . . . . . .  B  ADDR  00ABH  NOT USED
ET2. . . . . . . . . . . . . . . . .  B  ADDR  00ADH  NOT USED
EX0. . . . . . . . . . . . . . . . .  B  ADDR  00A8H  NOT USED
EX1. . . . . . . . . . . . . . . . .  B  ADDR  00AAH  NOT USED
EXEN2. . . . . . . . . . . . . . . .  B  ADDR  00CBH  NOT USED
EXF2 . . . . . . . . . . . . . . . .  B  ADDR  00CEH  NOT USED
EXTI0. . . . . . . . . . . . . . . .  C  ADDR  0003H  NOT USED
EXTI1. . . . . . . . . . . . . . . .  C  ADDR  0013H  NOT USED
F0 . . . . . . . . . . . . . . . . .  B  ADDR  00D5H  NOT USED
FE . . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
HEADX. . . . . . . . . . . . . . . .  N  NUMB  0028H
HEADY. . . . . . . . . . . . . . . .  N  NUMB  0029H
IE . . . . . . . . . . . . . . . . .  D  ADDR  00A8H  NOT USED
IE0. . . . . . . . . . . . . . . . .  B  ADDR  0089H  NOT USED
IE1. . . . . . . . . . . . . . . . .  B  ADDR  008BH  NOT USED
INT0 . . . . . . . . . . . . . . . .  B  ADDR  00B2H  NOT USED
INT1 . . . . . . . . . . . . . . . .  B  ADDR  00B3H  NOT USED
IP . . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPH. . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH0 . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH1 . . . . . . . . . . . . . . . .  D  ADDR  00B3H  NOT USED
IPL0 . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPL1 . . . . . . . . . . . . . . . .  D  ADDR  00B2H  NOT USED
IT0. . . . . . . . . . . . . . . . .  B  ADDR  0088H  NOT USED
IT1. . . . . . . . . . . . . . . . .  B  ADDR  008AH  NOT USED
KBE. . . . . . . . . . . . . . . . .  D  ADDR  009DH  NOT USED
KBF. . . . . . . . . . . . . . . . .  D  ADDR  009EH  NOT USED
KBLS . . . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
MAIN . . . . . . . . . . . . . . . .  C  ADDR  00A3H
MATRIXCHECKDOWN. . . . . . . . . . .  C  ADDR  00CDH
MATRIXCHECKLEFT. . . . . . . . . . .  C  ADDR  00B4H
MATRIXCHECKRIGHT . . . . . . . . . .  C  ADDR  00A3H  NOT USED
MATRIXCHECKUP. . . . . . . . . . . .  C  ADDR  00BCH
MOVEDOWN . . . . . . . . . . . . . .  C  ADDR  009CH
MOVELEFT . . . . . . . . . . . . . .  C  ADDR  007BH
MOVERIGHT. . . . . . . . . . . . . .  C  ADDR  0086H
MOVEUP . . . . . . . . . . . . . . .  C  ADDR  0091H
MOVE_STATE . . . . . . . . . . . . .  N  NUMB  0027H
MOVE_STATE_DOWN. . . . . . . . . . .  N  NUMB  003BH
MOVE_STATE_LEFT. . . . . . . . . . .  N  NUMB  0038H
MOVE_STATE_RIGHT . . . . . . . . . .  N  NUMB  0039H
MOVE_STATE_UP. . . . . . . . . . . .  N  NUMB  003AH
OSCCON . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
OV . . . . . . . . . . . . . . . . .  B  ADDR  00D2H  NOT USED
P. . . . . . . . . . . . . . . . . .  B  ADDR  00D0H  NOT USED
P0 . . . . . . . . . . . . . . . . .  D  ADDR  0080H
P1 . . . . . . . . . . . . . . . . .  D  ADDR  0090H
P1M1 . . . . . . . . . . . . . . . .  D  ADDR  00D4H  NOT USED
P1M2 . . . . . . . . . . . . . . . .  D  ADDR  00E2H  NOT USED
P2 . . . . . . . . . . . . . . . . .  D  ADDR  00A0H
P3 . . . . . . . . . . . . . . . . .  D  ADDR  00B0H  NOT USED
P3M1 . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
P3M2 . . . . . . . . . . . . . . . .  D  ADDR  00E3H  NOT USED
P4 . . . . . . . . . . . . . . . . .  D  ADDR  00C0H  NOT USED
P4M1 . . . . . . . . . . . . . . . .  D  ADDR  00D6H  NOT USED
P4M2 . . . . . . . . . . . . . . . .  D  ADDR  00E4H  NOT USED
P5 . . . . . . . . . . . . . . . . .  D  ADDR  00E8H  NOT USED
PC . . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PCON . . . . . . . . . . . . . . . .  D  ADDR  0087H  NOT USED
PPCL . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PS . . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSL. . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSW. . . . . . . . . . . . . . . . .  D  ADDR  00D0H  NOT USED
PT0. . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0L . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT1. . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1L . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT2. . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2L . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PX0. . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0L . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX1. . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1L . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
RB8. . . . . . . . . . . . . . . . .  B  ADDR  009AH  NOT USED
RCAP2H . . . . . . . . . . . . . . .  D  ADDR  00CBH  NOT USED
RCAP2L . . . . . . . . . . . . . . .  D  ADDR  00CAH  NOT USED
RCLK . . . . . . . . . . . . . . . .  B  ADDR  00CDH  NOT USED
RD . . . . . . . . . . . . . . . . .  B  ADDR  00B7H  NOT USED
REN. . . . . . . . . . . . . . . . .  B  ADDR  009CH  NOT USED
RESET. . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RI . . . . . . . . . . . . . . . . .  B  ADDR  0098H  NOT USED
RS0. . . . . . . . . . . . . . . . .  B  ADDR  00D3H  NOT USED
RS1. . . . . . . . . . . . . . . . .  B  ADDR  00D4H  NOT USED
RXD. . . . . . . . . . . . . . . . .  B  ADDR  00B0H  NOT USED
SADDR. . . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_0. . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_1. . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SADEN. . . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_0. . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_1. . . . . . . . . . . . . . .  D  ADDR  00BAH  NOT USED
SBUF . . . . . . . . . . . . . . . .  D  ADDR  0099H  NOT USED
SCON . . . . . . . . . . . . . . . .  D  ADDR  0098H  NOT USED
SETDOWN. . . . . . . . . . . . . . .  C  ADDR  0098H
SETLEFT. . . . . . . . . . . . . . .  C  ADDR  0077H
SETRIGHT . . . . . . . . . . . . . .  C  ADDR  0082H
SETTIMER . . . . . . . . . . . . . .  C  ADDR  0027H
SETUP. . . . . . . . . . . . . . . .  C  ADDR  008DH
SINT . . . . . . . . . . . . . . . .  C  ADDR  0023H  NOT USED
SM0. . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
SM1. . . . . . . . . . . . . . . . .  B  ADDR  009EH  NOT USED
SM2. . . . . . . . . . . . . . . . .  B  ADDR  009DH  NOT USED
SNAKEFOLLOWLOOP. . . . . . . . . . .  C  ADDR  003EH
SNAKELEDREPRESENTATIONX. . . . . . .  N  NUMB  0024H  NOT USED
SNAKELEDREPRESENTATIONY. . . . . . .  N  NUMB  0025H  NOT USED
SP . . . . . . . . . . . . . . . . .  D  ADDR  0081H  NOT USED
SPCON. . . . . . . . . . . . . . . .  D  ADDR  00C3H  NOT USED
SPCR . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
SPDAT. . . . . . . . . . . . . . . .  D  ADDR  00C5H  NOT USED
SPDR . . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
SPSR . . . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SPSTA. . . . . . . . . . . . . . . .  D  ADDR  00C4H  NOT USED
STARTTIMER . . . . . . . . . . . . .  C  ADDR  0033H
T0 . . . . . . . . . . . . . . . . .  B  ADDR  00B4H  NOT USED
T1 . . . . . . . . . . . . . . . . .  B  ADDR  00B5H  NOT USED
T2CON. . . . . . . . . . . . . . . .  D  ADDR  00C8H  NOT USED
T2MOD. . . . . . . . . . . . . . . .  D  ADDR  00C9H  NOT USED
TB8. . . . . . . . . . . . . . . . .  B  ADDR  009BH  NOT USED
TCLK . . . . . . . . . . . . . . . .  B  ADDR  00CCH  NOT USED
TCON . . . . . . . . . . . . . . . .  D  ADDR  0088H  NOT USED
TF0. . . . . . . . . . . . . . . . .  B  ADDR  008DH
TF1. . . . . . . . . . . . . . . . .  B  ADDR  008FH  NOT USED
TF2. . . . . . . . . . . . . . . . .  B  ADDR  00CFH  NOT USED
TH0. . . . . . . . . . . . . . . . .  D  ADDR  008CH
TH1. . . . . . . . . . . . . . . . .  D  ADDR  008DH  NOT USED
TH2. . . . . . . . . . . . . . . . .  D  ADDR  00CDH  NOT USED
TI . . . . . . . . . . . . . . . . .  B  ADDR  0099H  NOT USED
TIMER0 . . . . . . . . . . . . . . .  C  ADDR  000BH  NOT USED
TIMER1 . . . . . . . . . . . . . . .  C  ADDR  001BH  NOT USED
TIMER2 . . . . . . . . . . . . . . .  C  ADDR  002BH  NOT USED
TL0. . . . . . . . . . . . . . . . .  D  ADDR  008AH
TL1. . . . . . . . . . . . . . . . .  D  ADDR  008BH  NOT USED
TL2. . . . . . . . . . . . . . . . .  D  ADDR  00CCH  NOT USED
TMOD . . . . . . . . . . . . . . . .  D  ADDR  0089H
TODO . . . . . . . . . . . . . . . .  C  ADDR  00EFH
TR0. . . . . . . . . . . . . . . . .  B  ADDR  008CH
TR1. . . . . . . . . . . . . . . . .  B  ADDR  008EH  NOT USED
TR2. . . . . . . . . . . . . . . . .  B  ADDR  00CAH  NOT USED
TXD. . . . . . . . . . . . . . . . .  B  ADDR  00B1H  NOT USED
UPDATESNAKE. . . . . . . . . . . . .  C  ADDR  0036H
WDTCON . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTPRG . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTRST . . . . . . . . . . . . . . .  D  ADDR  00A6H  NOT USED
WR . . . . . . . . . . . . . . . . .  B  ADDR  00B6H  NOT USED