main                                                                                                                    PAGE 1
                         1     CSEG AT 0h
                         2
                         3     ; Snake Calculation
  0020                   4     Buffer1X EQU 20h; Col
  0021                   5     Buffer1Y EQU 21h; Row
  0022                   6     Buffer2X EQU 22h; Col
  0023                   7     Buffer2Y EQU 23h; Row
                         8
                         9     ; Lenght 3
0000 752A08             10     mov 2Ah ,#08h
0003 752B08             11     mov 2Bh, #08h
0006 752C08             12     mov 2Ch, #08h
0009 752D10             13     mov 2Dh, #10h
                        14
                        15     ; Starting point
  0028                  16     HeadX EQU 28h; Keep in sync with incrementor initial value (!!!)
  0029                  17     HeadY EQU 29h
000C D243               18     setb HeadX.3
000E D24C               19     setb HeadY.4
0010 852820             20     mov Buffer1X, HeadX
0013 852921             21     mov Buffer1Y, HeadY
                        22
                        23     ; Snake on grid with LEDs
  0024                  24     SnakeLedRepresentationX EQU 24h
  0025                  25     SnakeLedRepresentationY EQU 25h
                        26
                        27
  0027                  28     MOVE_STATE EQU 27h
  0038                  29     MOVE_STATE_left EQU MOVE_STATE.0
  0039                  30     MOVE_STATE_right EQU MOVE_STATE.1
  003A                  31     MOVE_STATE_up EQU MOVE_STATE.2
  003B                  32     MOVE_STATE_down EQU MOVE_STATE.3
0016 D23A               33     setb MOVE_STATE_UP
                        34
                        35
                        36     ; Init
0018 120021             37     lcall setTimer
001B 12002D             38     lcall startTimer
001E 0200B4             39     ljmp main
                        40
                        41     ; Timer
                        42     setTimer:
0021 758901             43     mov TMOD, #01h ; Timer0, 16bit
0024 C28D               44     clr TF0
0026 758A00             45     mov TL0, #000h; Timer low
0029 758CF0             46     mov TH0, #0F0h; Timer high
                        47     ; setb ET0
                        48     ; setb EA
002C 22                 49     ret
                        50
                        51     startTimer:
002D D28C               52     setb TR0
002F 22                 53     ret
                        54
                        55     ; Light up Matrix
                        56     ;updateMatrixLed:
                        57     ;mov P0, SnakeLedRepresentationY
                        58     ;mov P1, SnakeLedRepresentationX
                        59     ;ret
                        60
                        61
                        62
                        63     updateSnake:
                        64     ; Storage
                        65     ; starting from 28h
                        66
                        67     ; Reset LED Representation
                        68     ;mov SnakeLedRepresentationX, #00h
                        69     ;mov SnakeLedRepresentationY, #00h
                        70
0030 7928               71     mov R1, #28h
                        72
                        73
                        74     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        75     ;;;;;;;;;;;;;;;;;;;;;; Snake Follow Loop ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        76     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        77     SnakeFollowLoop:
                        78     ; R1 is our incrementor
                        79     ; Given Buffer1 filled
                        80     ; Save old Head to Buffer2
                        81
0032 8722               82     mov Buffer2X, @R1
0034 09                 83     inc R1
0035 8723               84     mov Buffer2Y, @R1
                        85
                        86     ;;;;;;;;;;;;;;;;;;;;; Buffer1 X/Y ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        87     ; Move Buffer1 to Head (Update first element with Buffer1)
                        88     ; mov A, Buffer1X ; OR: Buffer1X, SnakeLedRepresentationX -> Save in SnakeLedRepresentationX
                        89     ; orl SnakeLedRepresentationX, A
0037 19                 90     dec R1
0038 A720               91     mov @R1, Buffer1X
                        92
                        93     ; mov A, Buffer1Y ; OR: Buffer1Y, SnakeLedRepresentationY -> save in SnakeLedRepresentationY
                        94     ; orl SnakeLedRepresentationY, A
003A 09                 95     inc R1
003B A721               96     mov @R1, Buffer1Y
003D 09                 97     inc R1
                        98
                        99     ; Update snake with pos from buffer 1
003E 852180            100     mov P0, Buffer1Y
0041 852090            101     mov P1, Buffer1X
                       102
                       103
                       104     ;;;;;;;;;;;;;;;;;;;;;;;;;; Break? ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       105     ; Check if next element is 0
0044 E7                106     mov A, @R1
0045 6029              107     jz endUpdateSnakeFromBreak
                       108
                       109     ;;;;;;;;;;;;;;;;;;;;; Buffer2 X/Y ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       110     ; Store second element in Buffer1
0047 8720              111     mov Buffer1X, @R1
0049 09                112     inc R1
004A 8721              113     mov Buffer1Y, @R1
                       114
                       115     ; Move buffer2 to second element
004C 19                116     dec R1
004D A722              117     mov @R1, Buffer2X
                       118     ; mov A, Buffer2X ; OR: Buffer2X, SnakeLedRepresentationX -> save in SnakeLedRepresentationX
                       119     ; orl SnakeLedRepresentationX, A
004F 09                120     inc R1
0050 A723              121     mov @R1, Buffer2Y
0052 09                122     inc R1
                       123     ; mov A, Buffer2Y ; OR: Buffer2Y, SnakeLedRepresentationY -> save in SnakeLedRepresentationY
                       124     ; orl SnakeLedRepresentationY, A
                       125
                       126     ; Update snake with pos from buffer 2
0053 852380            127     mov P0, Buffer2Y
0056 852290            128     mov P1, Buffer2X
                       129
                       130     ;;;;;;;;;;;;;;;;;;;;;; End loop ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       131     ; Start with loop again
0059 E7                132     mov A, @R1
005A 70D6              133     jnz SnakeFollowLoop
                       134
                       135     endUpdateSnakeFromEndOfLoop:
                       136     ; Check if timer is triggered
005C 308D22            137     jnb TF0, returnFromSnake
005F 120021            138     lcall setTimer ; Reset timer
                       139
                       140     ; Lengthen snake using buffer 1
0062 A720              141     mov @R1, buffer1X
0064 09                142     inc R1
0065 A721              143     mov @R1, buffer1Y
                       144
0067 852180            145     mov P0, Buffer1Y
006A 852090            146     mov P1, Buffer1X
                       147
006D 120081            148     lcall returnFromSnake
                       149
                       150     endUpdateSnakeFromBreak:
                       151     ; Check if timer is triggered
0070 308D0E            152     jnb TF0, returnFromSnake
0073 120021            153     lcall setTimer ; Reset timer
                       154
                       155     ; Lengthen snake using buffer 2
0076 A722              156     mov @R1, buffer2X
0078 09                157     inc R1
0079 A723              158     mov @R1, buffer2Y
                       159
007B 852380            160     mov P0, Buffer2Y
007E 852290            161     mov P1, Buffer2X
                       162
                       163     returnFromSnake:
                       164     ; Move HEAD to Buffer1, so that move operations still work
0081 852820            165     mov Buffer1X, HeadX
0084 852921            166     mov Buffer1Y, HeadY
0087 22                167     ret
                       168
                       169
                       170     ;;;; Move Lookup table
                       171     ; Register 20h
                       172     ; Left  - #00000001b - bit 0
                       173     ; Right - #00000010b - bit 1
                       174     ; Up    - #00000100b - bit 2
                       175     ; Down  - #00001000b - bit 3
                       176
                       177     setLeft:
0088 752701            178     mov MOVE_STATE, #00000001b ; MOVE_STATE_LEFT
008B 22                179     ret
                       180
                       181     moveLeft:
008C C3                182     clr C
008D E520              183     mov A, Buffer1X
008F 03                184     RR A
0090 F520              185     mov Buffer1X, A
0092 22                186     ret
                       187
                       188     setRight:
0093 752702            189     mov MOVE_STATE, #00000010b ; MOVE_STATE_RIGHT
0096 22                190     ret
                       191
                       192     moveRight:
0097 C3                193     clr C
0098 E520              194     mov A, Buffer1X
009A 23                195     RL A
009B F520              196     mov Buffer1X, A
009D 22                197     ret
                       198
                       199     setUp:
009E 752704            200     mov MOVE_STATE, #00000100b ; MOVE_STATE_UP
00A1 22                201     ret
                       202
                       203     moveUp:
00A2 C3                204     clr C
00A3 E521              205     mov A, Buffer1Y
00A5 03                206     RR A
00A6 F521              207     mov Buffer1Y, A
00A8 22                208     ret
                       209
                       210     setDown:
00A9 752708            211     mov MOVE_STATE, #00001000b ; MOVE_STATE_DOWN
00AC 22                212     ret
                       213
                       214     moveDown:
00AD C3                215     clr C
00AE E521              216     mov A, Buffer1Y
00B0 23                217     RL A
00B1 F521              218     mov Buffer1Y, A
00B3 22                219     ret
                       220
                       221
                       222     ; ------------------------- MAIN ---------------------------------
                       223     main:
                       224     matrixCheckRight:
00B4 75A00F            225     mov P2, #00001111b
00B7 20A113            226     jb P2.1, matrixCheckUp ; P2.1 is 0 if button "4" or "6" is pressed
00BA 75A0F0            227     mov P2, #11110000b
00BD 20A605            228     jb P2.6, matrixCheckLeft ; P2.6 is 0 if button "6" is pressed
00C0 1193              229     call setRight
00C2 0200E3            230     ljmp callMove
                       231
                       232     matrixCheckLeft:
00C5 20A416            233     jb P2.4, matrixCheckDown ; P2.4 is 0 if button "4" is pressed
00C8 1188              234     call setLeft
00CA 0200E3            235     ljmp callMove
                       236
                       237     matrixCheckUp:
00CD 75A0F0            238     mov P2, #11110000b
00D0 20A510            239     jb P2.5, callMove ; P2.5 is 0 if button "2" or "8" is pressed
00D3 75A00F            240     mov P2, #00001111b
00D6 20A005            241     jb P2.0, matrixCheckDown ; P2.0 is 0 if button "2" is pressed
00D9 119E              242     call setUp
00DB 0200E3            243     ljmp callMove
                       244
                       245     matrixCheckDown:
00DE 20A202            246     jb P2.2, callMove ; P2.2 is 0 if button "8" is pressed
00E1 11A9              247     call setDown
                       248     ; no ljmp callMove needed
                       249
                       250
                       251
                       252     callMove:
                       253     checkLeft:
00E3 303805            254     jnb MOVE_STATE_LEFT, checkRight
00E6 118C              255     call moveLeft
00E8 020100            256     ljmp todo
                       257
                       258     checkRight:
00EB 303905            259     jnb MOVE_STATE_RIGHT, checkUp
00EE 1197              260     call moveRight
00F0 020100            261     ljmp todo
                       262
                       263     checkUp:
00F3 303A05            264     jnb MOVE_STATE_UP, checkDown
00F6 11A2              265     call moveUp
00F8 020100            266     ljmp todo
                       267
                       268     checkDown:
00FB 303B02            269     jnb MOVE_STATE_DOWN, todo
00FE 11AD              270     call moveDown
                       271
                       272     todo:
0100 1130              273     call updateSnake
                       274     ; call updateMatrixLed
                       275
0102 0200B4            276     ljmp main
                       277
                       278
****WARNING:Missing`END'directive
ASSEMBLY COMPLETE, NO ERRORS FOUND, 1 WARNING


ERROR SUMMARY:
Line 278, WARNING:Missing`END'directive

SYMBOL TABLE:
??MCU_8051_IDE . . . . . . . . . . .  N  NUMB  8051H  NOT USED
??VERSION. . . . . . . . . . . . . .  N  NUMB  0149H  NOT USED
AC . . . . . . . . . . . . . . . . .  B  ADDR  00D6H  NOT USED
ACC. . . . . . . . . . . . . . . . .  D  ADDR  00E0H  NOT USED
ACSR . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
ADCF . . . . . . . . . . . . . . . .  D  ADDR  00F6H  NOT USED
ADCLK. . . . . . . . . . . . . . . .  D  ADDR  00F2H  NOT USED
ADCON. . . . . . . . . . . . . . . .  D  ADDR  00F3H  NOT USED
ADDH . . . . . . . . . . . . . . . .  D  ADDR  00F5H  NOT USED
ADDL . . . . . . . . . . . . . . . .  D  ADDR  00F4H  NOT USED
AUXR . . . . . . . . . . . . . . . .  D  ADDR  008EH  NOT USED
AUXR1. . . . . . . . . . . . . . . .  D  ADDR  00A2H  NOT USED
B. . . . . . . . . . . . . . . . . .  D  ADDR  00F0H  NOT USED
BDRCON . . . . . . . . . . . . . . .  D  ADDR  009BH  NOT USED
BDRCON_1 . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
BRL. . . . . . . . . . . . . . . . .  D  ADDR  009AH  NOT USED
BUFFER1X . . . . . . . . . . . . . .  N  NUMB  0020H
BUFFER1Y . . . . . . . . . . . . . .  N  NUMB  0021H
BUFFER2X . . . . . . . . . . . . . .  N  NUMB  0022H
BUFFER2Y . . . . . . . . . . . . . .  N  NUMB  0023H
CALLMOVE . . . . . . . . . . . . . .  C  ADDR  00E3H
CCAP0H . . . . . . . . . . . . . . .  D  ADDR  00FAH  NOT USED
CCAP0L . . . . . . . . . . . . . . .  D  ADDR  00EAH  NOT USED
CCAP1H . . . . . . . . . . . . . . .  D  ADDR  00FBH  NOT USED
CCAP1L . . . . . . . . . . . . . . .  D  ADDR  00EBH  NOT USED
CCAP2H . . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAP3H . . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAP4H . . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL2H. . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAPL2L. . . . . . . . . . . . . . .  D  ADDR  00ECH  NOT USED
CCAPL3H. . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAPL3L. . . . . . . . . . . . . . .  D  ADDR  00EDH  NOT USED
CCAPL4H. . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL4L. . . . . . . . . . . . . . .  D  ADDR  00EEH  NOT USED
CCAPM0 . . . . . . . . . . . . . . .  D  ADDR  00DAH  NOT USED
CCAPM1 . . . . . . . . . . . . . . .  D  ADDR  00DBH  NOT USED
CCAPM2 . . . . . . . . . . . . . . .  D  ADDR  00DCH  NOT USED
CCAPM3 . . . . . . . . . . . . . . .  D  ADDR  00DDH  NOT USED
CCAPM4 . . . . . . . . . . . . . . .  D  ADDR  00DEH  NOT USED
CCF0 . . . . . . . . . . . . . . . .  B  ADDR  00D8H  NOT USED
CCF1 . . . . . . . . . . . . . . . .  B  ADDR  00D9H  NOT USED
CCF2 . . . . . . . . . . . . . . . .  B  ADDR  00DAH  NOT USED
CCF3 . . . . . . . . . . . . . . . .  B  ADDR  00DBH  NOT USED
CCF4 . . . . . . . . . . . . . . . .  B  ADDR  00DCH  NOT USED
CCON . . . . . . . . . . . . . . . .  D  ADDR  00D8H  NOT USED
CFINT. . . . . . . . . . . . . . . .  C  ADDR  0033H  NOT USED
CH . . . . . . . . . . . . . . . . .  D  ADDR  00F9H  NOT USED
CHECKDOWN. . . . . . . . . . . . . .  C  ADDR  00FBH
CHECKLEFT. . . . . . . . . . . . . .  C  ADDR  00E3H  NOT USED
CHECKRIGHT . . . . . . . . . . . . .  C  ADDR  00EBH
CHECKUP. . . . . . . . . . . . . . .  C  ADDR  00F3H
CKCON. . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON0 . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKRL . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
CKSEL. . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
CL . . . . . . . . . . . . . . . . .  D  ADDR  00E9H  NOT USED
CLKREG . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CMOD . . . . . . . . . . . . . . . .  D  ADDR  00D9H  NOT USED
CPRL2. . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CR . . . . . . . . . . . . . . . . .  B  ADDR  00DEH  NOT USED
CT2. . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
CY . . . . . . . . . . . . . . . . .  B  ADDR  00D7H  NOT USED
DP0H . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DP0L . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DP1H . . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
DP1L . . . . . . . . . . . . . . . .  D  ADDR  0084H  NOT USED
DPH. . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DPL. . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
EA . . . . . . . . . . . . . . . . .  B  ADDR  00AFH  NOT USED
EC . . . . . . . . . . . . . . . . .  B  ADDR  00AEH  NOT USED
EECON. . . . . . . . . . . . . . . .  D  ADDR  0096H  NOT USED
ENDUPDATESNAKEFROMBREAK. . . . . . .  C  ADDR  0070H
ENDUPDATESNAKEFROMENDOFLOOP. . . . .  C  ADDR  005CH  NOT USED
ES . . . . . . . . . . . . . . . . .  B  ADDR  00ACH  NOT USED
ET0. . . . . . . . . . . . . . . . .  B  ADDR  00A9H  NOT USED
ET1. . . . . . . . . . . . . . . . .  B  ADDR  00ABH  NOT USED
ET2. . . . . . . . . . . . . . . . .  B  ADDR  00ADH  NOT USED
EX0. . . . . . . . . . . . . . . . .  B  ADDR  00A8H  NOT USED
EX1. . . . . . . . . . . . . . . . .  B  ADDR  00AAH  NOT USED
EXEN2. . . . . . . . . . . . . . . .  B  ADDR  00CBH  NOT USED
EXF2 . . . . . . . . . . . . . . . .  B  ADDR  00CEH  NOT USED
EXTI0. . . . . . . . . . . . . . . .  C  ADDR  0003H  NOT USED
EXTI1. . . . . . . . . . . . . . . .  C  ADDR  0013H  NOT USED
F0 . . . . . . . . . . . . . . . . .  B  ADDR  00D5H  NOT USED
FE . . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
HEADX. . . . . . . . . . . . . . . .  N  NUMB  0028H
HEADY. . . . . . . . . . . . . . . .  N  NUMB  0029H
IE . . . . . . . . . . . . . . . . .  D  ADDR  00A8H  NOT USED
IE0. . . . . . . . . . . . . . . . .  B  ADDR  0089H  NOT USED
IE1. . . . . . . . . . . . . . . . .  B  ADDR  008BH  NOT USED
INT0 . . . . . . . . . . . . . . . .  B  ADDR  00B2H  NOT USED
INT1 . . . . . . . . . . . . . . . .  B  ADDR  00B3H  NOT USED
IP . . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPH. . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH0 . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH1 . . . . . . . . . . . . . . . .  D  ADDR  00B3H  NOT USED
IPL0 . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPL1 . . . . . . . . . . . . . . . .  D  ADDR  00B2H  NOT USED
IT0. . . . . . . . . . . . . . . . .  B  ADDR  0088H  NOT USED
IT1. . . . . . . . . . . . . . . . .  B  ADDR  008AH  NOT USED
KBE. . . . . . . . . . . . . . . . .  D  ADDR  009DH  NOT USED
KBF. . . . . . . . . . . . . . . . .  D  ADDR  009EH  NOT USED
KBLS . . . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
MAIN . . . . . . . . . . . . . . . .  C  ADDR  00B4H
MATRIXCHECKDOWN. . . . . . . . . . .  C  ADDR  00DEH
MATRIXCHECKLEFT. . . . . . . . . . .  C  ADDR  00C5H
MATRIXCHECKRIGHT . . . . . . . . . .  C  ADDR  00B4H  NOT USED
MATRIXCHECKUP. . . . . . . . . . . .  C  ADDR  00CDH
MOVEDOWN . . . . . . . . . . . . . .  C  ADDR  00ADH
MOVELEFT . . . . . . . . . . . . . .  C  ADDR  008CH
MOVERIGHT. . . . . . . . . . . . . .  C  ADDR  0097H
MOVEUP . . . . . . . . . . . . . . .  C  ADDR  00A2H
MOVE_STATE . . . . . . . . . . . . .  N  NUMB  0027H
MOVE_STATE_DOWN. . . . . . . . . . .  N  NUMB  003BH
MOVE_STATE_LEFT. . . . . . . . . . .  N  NUMB  0038H
MOVE_STATE_RIGHT . . . . . . . . . .  N  NUMB  0039H
MOVE_STATE_UP. . . . . . . . . . . .  N  NUMB  003AH
OSCCON . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
OV . . . . . . . . . . . . . . . . .  B  ADDR  00D2H  NOT USED
P. . . . . . . . . . . . . . . . . .  B  ADDR  00D0H  NOT USED
P0 . . . . . . . . . . . . . . . . .  D  ADDR  0080H
P1 . . . . . . . . . . . . . . . . .  D  ADDR  0090H
P1M1 . . . . . . . . . . . . . . . .  D  ADDR  00D4H  NOT USED
P1M2 . . . . . . . . . . . . . . . .  D  ADDR  00E2H  NOT USED
P2 . . . . . . . . . . . . . . . . .  D  ADDR  00A0H
P3 . . . . . . . . . . . . . . . . .  D  ADDR  00B0H  NOT USED
P3M1 . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
P3M2 . . . . . . . . . . . . . . . .  D  ADDR  00E3H  NOT USED
P4 . . . . . . . . . . . . . . . . .  D  ADDR  00C0H  NOT USED
P4M1 . . . . . . . . . . . . . . . .  D  ADDR  00D6H  NOT USED
P4M2 . . . . . . . . . . . . . . . .  D  ADDR  00E4H  NOT USED
P5 . . . . . . . . . . . . . . . . .  D  ADDR  00E8H  NOT USED
PC . . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PCON . . . . . . . . . . . . . . . .  D  ADDR  0087H  NOT USED
PPCL . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PS . . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSL. . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSW. . . . . . . . . . . . . . . . .  D  ADDR  00D0H  NOT USED
PT0. . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0L . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT1. . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1L . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT2. . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2L . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PX0. . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0L . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX1. . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1L . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
RB8. . . . . . . . . . . . . . . . .  B  ADDR  009AH  NOT USED
RCAP2H . . . . . . . . . . . . . . .  D  ADDR  00CBH  NOT USED
RCAP2L . . . . . . . . . . . . . . .  D  ADDR  00CAH  NOT USED
RCLK . . . . . . . . . . . . . . . .  B  ADDR  00CDH  NOT USED
RD . . . . . . . . . . . . . . . . .  B  ADDR  00B7H  NOT USED
REN. . . . . . . . . . . . . . . . .  B  ADDR  009CH  NOT USED
RESET. . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RETURNFROMSNAKE. . . . . . . . . . .  C  ADDR  0081H
RI . . . . . . . . . . . . . . . . .  B  ADDR  0098H  NOT USED
RS0. . . . . . . . . . . . . . . . .  B  ADDR  00D3H  NOT USED
RS1. . . . . . . . . . . . . . . . .  B  ADDR  00D4H  NOT USED
RXD. . . . . . . . . . . . . . . . .  B  ADDR  00B0H  NOT USED
SADDR. . . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_0. . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_1. . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SADEN. . . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_0. . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_1. . . . . . . . . . . . . . .  D  ADDR  00BAH  NOT USED
SBUF . . . . . . . . . . . . . . . .  D  ADDR  0099H  NOT USED
SCON . . . . . . . . . . . . . . . .  D  ADDR  0098H  NOT USED
SETDOWN. . . . . . . . . . . . . . .  C  ADDR  00A9H
SETLEFT. . . . . . . . . . . . . . .  C  ADDR  0088H
SETRIGHT . . . . . . . . . . . . . .  C  ADDR  0093H
SETTIMER . . . . . . . . . . . . . .  C  ADDR  0021H
SETUP. . . . . . . . . . . . . . . .  C  ADDR  009EH
SINT . . . . . . . . . . . . . . . .  C  ADDR  0023H  NOT USED
SM0. . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
SM1. . . . . . . . . . . . . . . . .  B  ADDR  009EH  NOT USED
SM2. . . . . . . . . . . . . . . . .  B  ADDR  009DH  NOT USED
SNAKEFOLLOWLOOP. . . . . . . . . . .  C  ADDR  0032H
SNAKELEDREPRESENTATIONX. . . . . . .  N  NUMB  0024H  NOT USED
SNAKELEDREPRESENTATIONY. . . . . . .  N  NUMB  0025H  NOT USED
SP . . . . . . . . . . . . . . . . .  D  ADDR  0081H  NOT USED
SPCON. . . . . . . . . . . . . . . .  D  ADDR  00C3H  NOT USED
SPCR . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
SPDAT. . . . . . . . . . . . . . . .  D  ADDR  00C5H  NOT USED
SPDR . . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
SPSR . . . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SPSTA. . . . . . . . . . . . . . . .  D  ADDR  00C4H  NOT USED
STARTTIMER . . . . . . . . . . . . .  C  ADDR  002DH
T0 . . . . . . . . . . . . . . . . .  B  ADDR  00B4H  NOT USED
T1 . . . . . . . . . . . . . . . . .  B  ADDR  00B5H  NOT USED
T2CON. . . . . . . . . . . . . . . .  D  ADDR  00C8H  NOT USED
T2MOD. . . . . . . . . . . . . . . .  D  ADDR  00C9H  NOT USED
TB8. . . . . . . . . . . . . . . . .  B  ADDR  009BH  NOT USED
TCLK . . . . . . . . . . . . . . . .  B  ADDR  00CCH  NOT USED
TCON . . . . . . . . . . . . . . . .  D  ADDR  0088H  NOT USED
TF0. . . . . . . . . . . . . . . . .  B  ADDR  008DH
TF1. . . . . . . . . . . . . . . . .  B  ADDR  008FH  NOT USED
TF2. . . . . . . . . . . . . . . . .  B  ADDR  00CFH  NOT USED
TH0. . . . . . . . . . . . . . . . .  D  ADDR  008CH
TH1. . . . . . . . . . . . . . . . .  D  ADDR  008DH  NOT USED
TH2. . . . . . . . . . . . . . . . .  D  ADDR  00CDH  NOT USED
TI . . . . . . . . . . . . . . . . .  B  ADDR  0099H  NOT USED
TIMER0 . . . . . . . . . . . . . . .  C  ADDR  000BH  NOT USED
TIMER1 . . . . . . . . . . . . . . .  C  ADDR  001BH  NOT USED
TIMER2 . . . . . . . . . . . . . . .  C  ADDR  002BH  NOT USED
TL0. . . . . . . . . . . . . . . . .  D  ADDR  008AH
TL1. . . . . . . . . . . . . . . . .  D  ADDR  008BH  NOT USED
TL2. . . . . . . . . . . . . . . . .  D  ADDR  00CCH  NOT USED
TMOD . . . . . . . . . . . . . . . .  D  ADDR  0089H
TODO . . . . . . . . . . . . . . . .  C  ADDR  0100H
TR0. . . . . . . . . . . . . . . . .  B  ADDR  008CH
TR1. . . . . . . . . . . . . . . . .  B  ADDR  008EH  NOT USED
TR2. . . . . . . . . . . . . . . . .  B  ADDR  00CAH  NOT USED
TXD. . . . . . . . . . . . . . . . .  B  ADDR  00B1H  NOT USED
UPDATESNAKE. . . . . . . . . . . . .  C  ADDR  0030H
WDTCON . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTPRG . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTRST . . . . . . . . . . . . . . .  D  ADDR  00A6H  NOT USED
WR . . . . . . . . . . . . . . . . .  B  ADDR  00B6H  NOT USED