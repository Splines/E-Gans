main                                                                                                                    PAGE 1
                         1     CSEG AT 0h
                         2
                         3     ; Snake Calculation
  0020                   4     Buffer1X EQU 20h; Col
  0021                   5     Buffer1Y EQU 21h; Row
  0022                   6     Buffer2X EQU 22h; Col
  0023                   7     Buffer2Y EQU 23h; Row
                         8
                         9     ; Lenght 3
                        10     ;mov 2Ah ,#08h
                        11     ;mov 2Bh, #08h
                        12     ;mov 2Ch, #10h
                        13     ;mov 2Dh, #08h
                        14
                        15     ; Starting point
  0028                  16     HeadX EQU 28h; Keep in sync with incrementor initial value (!!!)
  0029                  17     HeadY EQU 29h
0000 D243               18     setb HeadX.3
0002 D24C               19     setb HeadY.4
0004 852820             20     mov Buffer1X, HeadX
0007 852921             21     mov Buffer1Y, HeadY
                        22
                        23     ; Snake on grid with LEDs
  0024                  24     SnakeLedRepresentationX EQU 24h
  0025                  25     SnakeLedRepresentationY EQU 25h
                        26
                        27
  0027                  28     MOVE_STATE EQU 27h
  0038                  29     MOVE_STATE_left EQU MOVE_STATE.0
  0039                  30     MOVE_STATE_right EQU MOVE_STATE.1
  003A                  31     MOVE_STATE_up EQU MOVE_STATE.2
  003B                  32     MOVE_STATE_down EQU MOVE_STATE.3
000A D23A               33     setb MOVE_STATE_UP
                        34
                        35
                        36     ; Init
000C 120015             37     lcall setTimer
000F 120021             38     lcall startTimer
0012 020091             39     ljmp main
                        40
                        41     ; Timer
                        42     setTimer:
0015 758901             43     mov TMOD, #01h ; Timer0, 16bit
0018 C28D               44     clr TF0
001A 758AEB             45     mov TL0, #0EBh; Timer low
001D 758CFF             46     mov TH0, #0FFh; Timer high
                        47     ; setb ET0
                        48     ; setb EA
0020 22                 49     ret
                        50
                        51     startTimer:
0021 D28C               52     setb TR0
0023 22                 53     ret
                        54
                        55     ; Light up Matrix
                        56     ;updateMatrixLed:
                        57     ;mov P0, SnakeLedRepresentationY
                        58     ;mov P1, SnakeLedRepresentationX
                        59     ;ret
                        60
                        61
                        62
                        63     updateSnake:
0024 308D37             64     jnb TF0, endUpdateSnake
0027 120015             65     lcall setTimer
                        66     ; Storage
                        67     ; starting from 28h
                        68
                        69     ; Reset LED Representation
                        70     ;mov SnakeLedRepresentationX, #00h
                        71     ;mov SnakeLedRepresentationY, #00h
                        72
002A 7928               73     mov R1, #28h
                        74
                        75
                        76     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        77     ;;;;;;;;;;;;;;;;;;;;;; Snake Follow Loop ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        78     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        79     SnakeFollowLoop:
                        80     ; R1 is our incrementor
                        81     ; Given Buffer1 filled
                        82     ; Save old Head to Buffer2
                        83
002C 8722               84     mov Buffer2X, @R1
002E 09                 85     inc R1
002F 8723               86     mov Buffer2Y, @R1
                        87
                        88     ;;;;;;;;;;;;;;;;;;;;; Buffer1 X/Y ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        89     ; Move Buffer1 to Head (Update first element with Buffer1)
0031 E520               90     mov A, Buffer1X ; OR: Buffer1X, SnakeLedRepresentationX -> Save in SnakeLedRepresentationX
                        91     ; orl SnakeLedRepresentationX, A
0033 19                 92     dec R1
0034 A720               93     mov @R1, Buffer1X
                        94
0036 E521               95     mov A, Buffer1Y ; OR: Buffer1Y, SnakeLedRepresentationY -> save in SnakeLedRepresentationY
                        96     ; orl SnakeLedRepresentationY, A
0038 09                 97     inc R1
0039 A721               98     mov @R1, Buffer1Y
003B 09                 99     inc R1
                       100
                       101     ; Update snake with pos from buffer 1
003C 852180            102     mov P0, Buffer1Y
003F 852090            103     mov P1, Buffer1X
                       104
                       105
                       106     ;;;;;;;;;;;;;;;;;;;;;;;;;; Break? ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       107     ; Check if next element is 0
0042 E7                108     mov A, @R1
0043 6019              109     jz endUpdateSnake
                       110
                       111     ;;;;;;;;;;;;;;;;;;;;; Buffer2 X/Y ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       112     ; Store second element in Buffer1
0045 8720              113     mov Buffer1X, @R1
0047 09                114     inc R1
0048 8721              115     mov Buffer1Y, @R1
                       116
                       117     ; Move buffer2 to second element
004A 19                118     dec R1
004B A722              119     mov @R1, Buffer2X
004D E522              120     mov A, Buffer2X ; OR: Buffer2X, SnakeLedRepresentationX -> save in SnakeLedRepresentationX
                       121     ; orl SnakeLedRepresentationX, A
004F 09                122     inc R1
0050 A723              123     mov @R1, Buffer2Y
0052 09                124     inc R1
0053 E523              125     mov A, Buffer2Y ; OR: Buffer2Y, SnakeLedRepresentationY -> save in SnakeLedRepresentationY
                       126     ; orl SnakeLedRepresentationY, A
                       127
                       128     ; Update snake with pos from buffer 2
0055 852380            129     mov P0, Buffer2Y
0058 852290            130     mov P1, Buffer2X
                       131
                       132     ;;;;;;;;;;;;;;;;;;;;;; End loop ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       133     ; Do a jump
005B E7                134     mov A, @R1
005C 70CE              135     jnz SnakeFollowLoop
                       136
                       137     endUpdateSnake:
                       138     ; Move HEAD to Buffer1, so that move operations still work
005E 852820            139     mov Buffer1X, HeadX
0061 852921            140     mov Buffer1Y, HeadY
0064 22                141     ret
                       142
                       143
                       144
                       145     ;;;; Move Lookup table
                       146     ; Register 20h
                       147     ; Left  - #00000001b - bit 0
                       148     ; Right - #00000010b - bit 1
                       149     ; Up    - #00000100b - bit 2
                       150     ; Down  - #00001000b - bit 3
                       151
                       152     setLeft:
0065 752701            153     mov MOVE_STATE, #00000001b ; MOVE_STATE_LEFT
0068 22                154     ret
                       155
                       156     moveLeft:
0069 C3                157     clr C
006A E520              158     mov A, Buffer1X
006C 03                159     RR A
006D F520              160     mov Buffer1X, A
006F 22                161     ret
                       162
                       163     setRight:
0070 752702            164     mov MOVE_STATE, #00000010b ; MOVE_STATE_RIGHT
0073 22                165     ret
                       166
                       167     moveRight:
0074 C3                168     clr C
0075 E520              169     mov A, Buffer1X
0077 23                170     RL A
0078 F520              171     mov Buffer1X, A
007A 22                172     ret
                       173
                       174     setUp:
007B 752704            175     mov MOVE_STATE, #00000100b ; MOVE_STATE_UP
007E 22                176     ret
                       177
                       178     moveUp:
007F C3                179     clr C
0080 E521              180     mov A, Buffer1Y
0082 03                181     RR A
0083 F521              182     mov Buffer1Y, A
0085 22                183     ret
                       184
                       185     setDown:
0086 752708            186     mov MOVE_STATE, #00001000b ; MOVE_STATE_DOWN
0089 22                187     ret
                       188
                       189     moveDown:
008A C3                190     clr C
008B E521              191     mov A, Buffer1Y
008D 23                192     RL A
008E F521              193     mov Buffer1Y, A
0090 22                194     ret
                       195
                       196
                       197     ; ------------------------- MAIN ---------------------------------
                       198     main:
                       199     matrixCheckRight:
0091 75A00F            200     mov P2, #00001111b
0094 20A113            201     jb P2.1, matrixCheckUp ; P2.1 is 0 if button "4" or "6" is pressed
0097 75A0F0            202     mov P2, #11110000b
009A 20A605            203     jb P2.6, matrixCheckLeft ; P2.6 is 0 if button "6" is pressed
009D 1170              204     call setRight
009F 0200C0            205     ljmp callMove
                       206
                       207     matrixCheckLeft:
00A2 20A416            208     jb P2.4, matrixCheckDown ; P2.4 is 0 if button "4" is pressed
00A5 1165              209     call setLeft
00A7 0200C0            210     ljmp callMove
                       211
                       212     matrixCheckUp:
00AA 75A0F0            213     mov P2, #11110000b
00AD 20A510            214     jb P2.5, callMove ; P2.5 is 0 if button "2" or "8" is pressed
00B0 75A00F            215     mov P2, #00001111b
00B3 20A005            216     jb P2.0, matrixCheckDown ; P2.0 is 0 if button "2" is pressed
00B6 117B              217     call setUp
00B8 0200C0            218     ljmp callMove
                       219
                       220     matrixCheckDown:
00BB 20A202            221     jb P2.2, callMove ; P2.2 is 0 if button "8" is pressed
00BE 1186              222     call setDown
                       223     ; no ljmp callMove needed
                       224
                       225
                       226
                       227     callMove:
                       228     checkLeft:
00C0 303805            229     jnb MOVE_STATE_LEFT, checkRight
00C3 1169              230     call moveLeft
00C5 0200DD            231     ljmp todo
                       232
                       233     checkRight:
00C8 303905            234     jnb MOVE_STATE_RIGHT, checkUp
00CB 1174              235     call moveRight
00CD 0200DD            236     ljmp todo
                       237
                       238     checkUp:
00D0 303A05            239     jnb MOVE_STATE_UP, checkDown
00D3 117F              240     call moveUp
00D5 0200DD            241     ljmp todo
                       242
                       243     checkDown:
00D8 303B02            244     jnb MOVE_STATE_DOWN, todo
00DB 118A              245     call moveDown
                       246
                       247     todo:
00DD 1124              248     call updateSnake
                       249     ; call updateMatrixLed
                       250
00DF 020091            251     ljmp main
                       252
                       253
****WARNING:Missing`END'directive
ASSEMBLY COMPLETE, NO ERRORS FOUND, 1 WARNING


ERROR SUMMARY:
Line 253, WARNING:Missing`END'directive

SYMBOL TABLE:
??MCU_8051_IDE . . . . . . . . . . .  N  NUMB  8051H  NOT USED
??VERSION. . . . . . . . . . . . . .  N  NUMB  0149H  NOT USED
AC . . . . . . . . . . . . . . . . .  B  ADDR  00D6H  NOT USED
ACC. . . . . . . . . . . . . . . . .  D  ADDR  00E0H  NOT USED
ACSR . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
ADCF . . . . . . . . . . . . . . . .  D  ADDR  00F6H  NOT USED
ADCLK. . . . . . . . . . . . . . . .  D  ADDR  00F2H  NOT USED
ADCON. . . . . . . . . . . . . . . .  D  ADDR  00F3H  NOT USED
ADDH . . . . . . . . . . . . . . . .  D  ADDR  00F5H  NOT USED
ADDL . . . . . . . . . . . . . . . .  D  ADDR  00F4H  NOT USED
AUXR . . . . . . . . . . . . . . . .  D  ADDR  008EH  NOT USED
AUXR1. . . . . . . . . . . . . . . .  D  ADDR  00A2H  NOT USED
B. . . . . . . . . . . . . . . . . .  D  ADDR  00F0H  NOT USED
BDRCON . . . . . . . . . . . . . . .  D  ADDR  009BH  NOT USED
BDRCON_1 . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
BRL. . . . . . . . . . . . . . . . .  D  ADDR  009AH  NOT USED
BUFFER1X . . . . . . . . . . . . . .  N  NUMB  0020H
BUFFER1Y . . . . . . . . . . . . . .  N  NUMB  0021H
BUFFER2X . . . . . . . . . . . . . .  N  NUMB  0022H
BUFFER2Y . . . . . . . . . . . . . .  N  NUMB  0023H
CALLMOVE . . . . . . . . . . . . . .  C  ADDR  00C0H
CCAP0H . . . . . . . . . . . . . . .  D  ADDR  00FAH  NOT USED
CCAP0L . . . . . . . . . . . . . . .  D  ADDR  00EAH  NOT USED
CCAP1H . . . . . . . . . . . . . . .  D  ADDR  00FBH  NOT USED
CCAP1L . . . . . . . . . . . . . . .  D  ADDR  00EBH  NOT USED
CCAP2H . . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAP3H . . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAP4H . . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL2H. . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAPL2L. . . . . . . . . . . . . . .  D  ADDR  00ECH  NOT USED
CCAPL3H. . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAPL3L. . . . . . . . . . . . . . .  D  ADDR  00EDH  NOT USED
CCAPL4H. . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL4L. . . . . . . . . . . . . . .  D  ADDR  00EEH  NOT USED
CCAPM0 . . . . . . . . . . . . . . .  D  ADDR  00DAH  NOT USED
CCAPM1 . . . . . . . . . . . . . . .  D  ADDR  00DBH  NOT USED
CCAPM2 . . . . . . . . . . . . . . .  D  ADDR  00DCH  NOT USED
CCAPM3 . . . . . . . . . . . . . . .  D  ADDR  00DDH  NOT USED
CCAPM4 . . . . . . . . . . . . . . .  D  ADDR  00DEH  NOT USED
CCF0 . . . . . . . . . . . . . . . .  B  ADDR  00D8H  NOT USED
CCF1 . . . . . . . . . . . . . . . .  B  ADDR  00D9H  NOT USED
CCF2 . . . . . . . . . . . . . . . .  B  ADDR  00DAH  NOT USED
CCF3 . . . . . . . . . . . . . . . .  B  ADDR  00DBH  NOT USED
CCF4 . . . . . . . . . . . . . . . .  B  ADDR  00DCH  NOT USED
CCON . . . . . . . . . . . . . . . .  D  ADDR  00D8H  NOT USED
CFINT. . . . . . . . . . . . . . . .  C  ADDR  0033H  NOT USED
CH . . . . . . . . . . . . . . . . .  D  ADDR  00F9H  NOT USED
CHECKDOWN. . . . . . . . . . . . . .  C  ADDR  00D8H
CHECKLEFT. . . . . . . . . . . . . .  C  ADDR  00C0H  NOT USED
CHECKRIGHT . . . . . . . . . . . . .  C  ADDR  00C8H
CHECKUP. . . . . . . . . . . . . . .  C  ADDR  00D0H
CKCON. . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON0 . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKRL . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
CKSEL. . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
CL . . . . . . . . . . . . . . . . .  D  ADDR  00E9H  NOT USED
CLKREG . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CMOD . . . . . . . . . . . . . . . .  D  ADDR  00D9H  NOT USED
CPRL2. . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CR . . . . . . . . . . . . . . . . .  B  ADDR  00DEH  NOT USED
CT2. . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
CY . . . . . . . . . . . . . . . . .  B  ADDR  00D7H  NOT USED
DP0H . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DP0L . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DP1H . . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
DP1L . . . . . . . . . . . . . . . .  D  ADDR  0084H  NOT USED
DPH. . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DPL. . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
EA . . . . . . . . . . . . . . . . .  B  ADDR  00AFH  NOT USED
EC . . . . . . . . . . . . . . . . .  B  ADDR  00AEH  NOT USED
EECON. . . . . . . . . . . . . . . .  D  ADDR  0096H  NOT USED
ENDUPDATESNAKE . . . . . . . . . . .  C  ADDR  005EH
ES . . . . . . . . . . . . . . . . .  B  ADDR  00ACH  NOT USED
ET0. . . . . . . . . . . . . . . . .  B  ADDR  00A9H  NOT USED
ET1. . . . . . . . . . . . . . . . .  B  ADDR  00ABH  NOT USED
ET2. . . . . . . . . . . . . . . . .  B  ADDR  00ADH  NOT USED
EX0. . . . . . . . . . . . . . . . .  B  ADDR  00A8H  NOT USED
EX1. . . . . . . . . . . . . . . . .  B  ADDR  00AAH  NOT USED
EXEN2. . . . . . . . . . . . . . . .  B  ADDR  00CBH  NOT USED
EXF2 . . . . . . . . . . . . . . . .  B  ADDR  00CEH  NOT USED
EXTI0. . . . . . . . . . . . . . . .  C  ADDR  0003H  NOT USED
EXTI1. . . . . . . . . . . . . . . .  C  ADDR  0013H  NOT USED
F0 . . . . . . . . . . . . . . . . .  B  ADDR  00D5H  NOT USED
FE . . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
HEADX. . . . . . . . . . . . . . . .  N  NUMB  0028H
HEADY. . . . . . . . . . . . . . . .  N  NUMB  0029H
IE . . . . . . . . . . . . . . . . .  D  ADDR  00A8H  NOT USED
IE0. . . . . . . . . . . . . . . . .  B  ADDR  0089H  NOT USED
IE1. . . . . . . . . . . . . . . . .  B  ADDR  008BH  NOT USED
INT0 . . . . . . . . . . . . . . . .  B  ADDR  00B2H  NOT USED
INT1 . . . . . . . . . . . . . . . .  B  ADDR  00B3H  NOT USED
IP . . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPH. . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH0 . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH1 . . . . . . . . . . . . . . . .  D  ADDR  00B3H  NOT USED
IPL0 . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPL1 . . . . . . . . . . . . . . . .  D  ADDR  00B2H  NOT USED
IT0. . . . . . . . . . . . . . . . .  B  ADDR  0088H  NOT USED
IT1. . . . . . . . . . . . . . . . .  B  ADDR  008AH  NOT USED
KBE. . . . . . . . . . . . . . . . .  D  ADDR  009DH  NOT USED
KBF. . . . . . . . . . . . . . . . .  D  ADDR  009EH  NOT USED
KBLS . . . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
MAIN . . . . . . . . . . . . . . . .  C  ADDR  0091H
MATRIXCHECKDOWN. . . . . . . . . . .  C  ADDR  00BBH
MATRIXCHECKLEFT. . . . . . . . . . .  C  ADDR  00A2H
MATRIXCHECKRIGHT . . . . . . . . . .  C  ADDR  0091H  NOT USED
MATRIXCHECKUP. . . . . . . . . . . .  C  ADDR  00AAH
MOVEDOWN . . . . . . . . . . . . . .  C  ADDR  008AH
MOVELEFT . . . . . . . . . . . . . .  C  ADDR  0069H
MOVERIGHT. . . . . . . . . . . . . .  C  ADDR  0074H
MOVEUP . . . . . . . . . . . . . . .  C  ADDR  007FH
MOVE_STATE . . . . . . . . . . . . .  N  NUMB  0027H
MOVE_STATE_DOWN. . . . . . . . . . .  N  NUMB  003BH
MOVE_STATE_LEFT. . . . . . . . . . .  N  NUMB  0038H
MOVE_STATE_RIGHT . . . . . . . . . .  N  NUMB  0039H
MOVE_STATE_UP. . . . . . . . . . . .  N  NUMB  003AH
OSCCON . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
OV . . . . . . . . . . . . . . . . .  B  ADDR  00D2H  NOT USED
P. . . . . . . . . . . . . . . . . .  B  ADDR  00D0H  NOT USED
P0 . . . . . . . . . . . . . . . . .  D  ADDR  0080H
P1 . . . . . . . . . . . . . . . . .  D  ADDR  0090H
P1M1 . . . . . . . . . . . . . . . .  D  ADDR  00D4H  NOT USED
P1M2 . . . . . . . . . . . . . . . .  D  ADDR  00E2H  NOT USED
P2 . . . . . . . . . . . . . . . . .  D  ADDR  00A0H
P3 . . . . . . . . . . . . . . . . .  D  ADDR  00B0H  NOT USED
P3M1 . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
P3M2 . . . . . . . . . . . . . . . .  D  ADDR  00E3H  NOT USED
P4 . . . . . . . . . . . . . . . . .  D  ADDR  00C0H  NOT USED
P4M1 . . . . . . . . . . . . . . . .  D  ADDR  00D6H  NOT USED
P4M2 . . . . . . . . . . . . . . . .  D  ADDR  00E4H  NOT USED
P5 . . . . . . . . . . . . . . . . .  D  ADDR  00E8H  NOT USED
PC . . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PCON . . . . . . . . . . . . . . . .  D  ADDR  0087H  NOT USED
PPCL . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PS . . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSL. . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSW. . . . . . . . . . . . . . . . .  D  ADDR  00D0H  NOT USED
PT0. . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0L . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT1. . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1L . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT2. . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2L . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PX0. . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0L . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX1. . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1L . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
RB8. . . . . . . . . . . . . . . . .  B  ADDR  009AH  NOT USED
RCAP2H . . . . . . . . . . . . . . .  D  ADDR  00CBH  NOT USED
RCAP2L . . . . . . . . . . . . . . .  D  ADDR  00CAH  NOT USED
RCLK . . . . . . . . . . . . . . . .  B  ADDR  00CDH  NOT USED
RD . . . . . . . . . . . . . . . . .  B  ADDR  00B7H  NOT USED
REN. . . . . . . . . . . . . . . . .  B  ADDR  009CH  NOT USED
RESET. . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RI . . . . . . . . . . . . . . . . .  B  ADDR  0098H  NOT USED
RS0. . . . . . . . . . . . . . . . .  B  ADDR  00D3H  NOT USED
RS1. . . . . . . . . . . . . . . . .  B  ADDR  00D4H  NOT USED
RXD. . . . . . . . . . . . . . . . .  B  ADDR  00B0H  NOT USED
SADDR. . . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_0. . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_1. . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SADEN. . . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_0. . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_1. . . . . . . . . . . . . . .  D  ADDR  00BAH  NOT USED
SBUF . . . . . . . . . . . . . . . .  D  ADDR  0099H  NOT USED
SCON . . . . . . . . . . . . . . . .  D  ADDR  0098H  NOT USED
SETDOWN. . . . . . . . . . . . . . .  C  ADDR  0086H
SETLEFT. . . . . . . . . . . . . . .  C  ADDR  0065H
SETRIGHT . . . . . . . . . . . . . .  C  ADDR  0070H
SETTIMER . . . . . . . . . . . . . .  C  ADDR  0015H
SETUP. . . . . . . . . . . . . . . .  C  ADDR  007BH
SINT . . . . . . . . . . . . . . . .  C  ADDR  0023H  NOT USED
SM0. . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
SM1. . . . . . . . . . . . . . . . .  B  ADDR  009EH  NOT USED
SM2. . . . . . . . . . . . . . . . .  B  ADDR  009DH  NOT USED
SNAKEFOLLOWLOOP. . . . . . . . . . .  C  ADDR  002CH
SNAKELEDREPRESENTATIONX. . . . . . .  N  NUMB  0024H  NOT USED
SNAKELEDREPRESENTATIONY. . . . . . .  N  NUMB  0025H  NOT USED
SP . . . . . . . . . . . . . . . . .  D  ADDR  0081H  NOT USED
SPCON. . . . . . . . . . . . . . . .  D  ADDR  00C3H  NOT USED
SPCR . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
SPDAT. . . . . . . . . . . . . . . .  D  ADDR  00C5H  NOT USED
SPDR . . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
SPSR . . . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SPSTA. . . . . . . . . . . . . . . .  D  ADDR  00C4H  NOT USED
STARTTIMER . . . . . . . . . . . . .  C  ADDR  0021H
T0 . . . . . . . . . . . . . . . . .  B  ADDR  00B4H  NOT USED
T1 . . . . . . . . . . . . . . . . .  B  ADDR  00B5H  NOT USED
T2CON. . . . . . . . . . . . . . . .  D  ADDR  00C8H  NOT USED
T2MOD. . . . . . . . . . . . . . . .  D  ADDR  00C9H  NOT USED
TB8. . . . . . . . . . . . . . . . .  B  ADDR  009BH  NOT USED
TCLK . . . . . . . . . . . . . . . .  B  ADDR  00CCH  NOT USED
TCON . . . . . . . . . . . . . . . .  D  ADDR  0088H  NOT USED
TF0. . . . . . . . . . . . . . . . .  B  ADDR  008DH
TF1. . . . . . . . . . . . . . . . .  B  ADDR  008FH  NOT USED
TF2. . . . . . . . . . . . . . . . .  B  ADDR  00CFH  NOT USED
TH0. . . . . . . . . . . . . . . . .  D  ADDR  008CH
TH1. . . . . . . . . . . . . . . . .  D  ADDR  008DH  NOT USED
TH2. . . . . . . . . . . . . . . . .  D  ADDR  00CDH  NOT USED
TI . . . . . . . . . . . . . . . . .  B  ADDR  0099H  NOT USED
TIMER0 . . . . . . . . . . . . . . .  C  ADDR  000BH  NOT USED
TIMER1 . . . . . . . . . . . . . . .  C  ADDR  001BH  NOT USED
TIMER2 . . . . . . . . . . . . . . .  C  ADDR  002BH  NOT USED
TL0. . . . . . . . . . . . . . . . .  D  ADDR  008AH
TL1. . . . . . . . . . . . . . . . .  D  ADDR  008BH  NOT USED
TL2. . . . . . . . . . . . . . . . .  D  ADDR  00CCH  NOT USED
TMOD . . . . . . . . . . . . . . . .  D  ADDR  0089H
TODO . . . . . . . . . . . . . . . .  C  ADDR  00DDH
TR0. . . . . . . . . . . . . . . . .  B  ADDR  008CH
TR1. . . . . . . . . . . . . . . . .  B  ADDR  008EH  NOT USED
TR2. . . . . . . . . . . . . . . . .  B  ADDR  00CAH  NOT USED
TXD. . . . . . . . . . . . . . . . .  B  ADDR  00B1H  NOT USED
UPDATESNAKE. . . . . . . . . . . . .  C  ADDR  0024H
WDTCON . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTPRG . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTRST . . . . . . . . . . . . . . .  D  ADDR  00A6H  NOT USED
WR . . . . . . . . . . . . . . . . .  B  ADDR  00B6H  NOT USED